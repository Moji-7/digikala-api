{
    "sourceFile": "src/digikala/digikala.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1702546715134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702547304001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { Controller, Get, Query, Inject } from '@nestjs/common';\n-import { ProxyService } from './proxy.service';\n+import { ProxyService } from './proxy/proxy.service';\n \n+\n @Controller('digikala')\n export class DigikalaController {\n   constructor(@Inject(ProxyService) private proxyService: ProxyService) {}\n \n"
                },
                {
                    "date": 1702548244219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,43 @@\n-import { Controller, Get, Query, Inject } from '@nestjs/common';\n-import { ProxyService } from './proxy/proxy.service';\n+// import { Controller, Get, Query, Inject } from '@nestjs/common';\n+// import { ProxyService } from './proxy/proxy.service';\n \n \n+// @Controller('digikala')\n+// export class DigikalaController {\n+//   constructor(@Inject(ProxyService) private proxyService: ProxyService) {}\n+\n+//   @Get('search')\n+//   async searchdigikala(\n+//     @Query('q') q: string,\n+//     @Query('page') page: number,\n+//     @Query('sort') sort: string,\n+//   ) {\n+//     // Define the request options\n+//     const config = {\n+//       method: 'GET',\n+//       url: '/search', // This will be rewritten by the proxyService\n+//       params: {\n+//         q, // The search term\n+//         page, // The page number\n+//         sort, // The sort order\n+//       },\n+//     };\n+\n+//     // Make the request using the proxyService and return the response data\n+//     return this.proxyService.proxyRequest(config);\n+//   }\n+// }\n+\n+import { Controller, Get, Inject } from '@nestjs/common';\n+import { ProxyService } from './proxy.service';\n+\n @Controller('digikala')\n export class DigikalaController {\n   constructor(@Inject(ProxyService) private proxyService: ProxyService) {}\n \n-  @Get('search')\n-  async searchdigikala(\n-    @Query('q') q: string,\n-    @Query('page') page: number,\n-    @Query('sort') sort: string,\n-  ) {\n-    // Define the request options\n-    const config = {\n-      method: 'GET',\n-      url: '/search', // This will be rewritten by the proxyService\n-      params: {\n-        q, // The search term\n-        page, // The page number\n-        sort, // The sort order\n-      },\n-    };\n-\n+  @Get('products')\n+  async getProducts() {\n     // Make the request using the proxyService and return the response data\n-    return this.proxyService.proxyRequest(config);\n+    return this.proxyService.getProducts();\n   }\n }\n"
                },
                {
                    "date": 1702548320274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n @Controller('digikala')\n export class DigikalaController {\n   constructor(@Inject(ProxyService) private proxyService: ProxyService) {}\n \n-  @Get('products')\n+  @Get('search')\n   async getProducts() {\n     // Make the request using the proxyService and return the response data\n     return this.proxyService.getProducts();\n   }\n"
                },
                {
                    "date": 1702710426654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,12 +29,13 @@\n // }\n \n import { Controller, Get, Inject } from '@nestjs/common';\n import { ProxyService } from './proxy.service';\n+import { DigikalaService } from './digikala.service';\n \n @Controller('digikala')\n export class DigikalaController {\n-  constructor(@Inject(ProxyService) private proxyService: ProxyService) {}\n+  constructor(@Inject(DigikalaService) private proxyService: DigikalaService) {}\n \n   @Get('search')\n   async getProducts() {\n     // Make the request using the proxyService and return the response data\n"
                },
                {
                    "date": 1702971856551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,7 +38,12 @@\n \n   @Get('search')\n   async getProducts() {\n     // Make the request using the proxyService and return the response data\n-    return this.proxyService.getProducts();\n+    return this.proxyService.search();\n+  }  \n+  @Get('ordersme')\n+  async getOrdersMe() {\n+    // Make the request using the proxyService and return the response data\n+    return this.proxyService.getOrdersMe();\n   }\n }\n"
                },
                {
                    "date": 1707826642672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,12 +36,17 @@\n export class DigikalaController {\n   constructor(@Inject(DigikalaService) private proxyService: DigikalaService) {}\n \n   @Get('search')\n-  async getProducts() {\n+  async get() {\n     // Make the request using the proxyService and return the response data\n     return this.proxyService.search();\n   }  \n+  @Get('searchProduct')\n+  async getProducts() {\n+    // Make the request using the proxyService and return the response data\n+    return this.proxyService.searchProduct();\n+  }  \n   @Get('ordersme')\n   async getOrdersMe() {\n     // Make the request using the proxyService and return the response data\n     return this.proxyService.getOrdersMe();\n"
                },
                {
                    "date": 1707827584340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,12 +27,15 @@\n //     return this.proxyService.proxyRequest(config);\n //   }\n // }\n \n-import { Controller, Get, Inject } from '@nestjs/common';\n+import { Controller, Get, Inject, Query } from '@nestjs/common';\n import { ProxyService } from './proxy.service';\n import { DigikalaService } from './digikala.service';\n+import { ApiQuery } from '@nestjs/swagger';\n \n+\n+\n @Controller('digikala')\n export class DigikalaController {\n   constructor(@Inject(DigikalaService) private proxyService: DigikalaService) {}\n \n@@ -40,12 +43,16 @@\n   async get() {\n     // Make the request using the proxyService and return the response data\n     return this.proxyService.search();\n   }  \n+\n+ \n   @Get('searchProduct')\n-  async getProducts() {\n+  @ApiQuery({ name: 'inputValue', type: String, required: false })\n+  @ApiQuery({ name: 'page', type: Number, required: true })\n+    async getProducts(@Query() searchProductQuery: SearchProductQuery): Promise<any[]> {\n     // Make the request using the proxyService and return the response data\n-    return this.proxyService.searchProduct();\n+    return this.proxyService.searchProduct(searchProductQuery);\n   }  \n   @Get('ordersme')\n   async getOrdersMe() {\n     // Make the request using the proxyService and return the response data\n"
                },
                {
                    "date": 1707827715778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n import { Controller, Get, Inject, Query } from '@nestjs/common';\n import { ProxyService } from './proxy.service';\n import { DigikalaService } from './digikala.service';\n import { ApiQuery } from '@nestjs/swagger';\n+import { SearchProductQuery } from 'src/hamechidun/DTO/product';\n \n \n \n @Controller('digikala')\n"
                },
                {
                    "date": 1707887451708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n  \n   @Get('searchProduct')\n   @ApiQuery({ name: 'inputValue', type: String, required: false })\n   @ApiQuery({ name: 'page', type: Number, required: true })\n-    async getProducts(@Query() searchProductQuery: SearchProductQuery): Promise<any[]> {\n+    async getProducts(@Query() searchProductQuery: SearchProductQuery): Promise<any> {\n     // Make the request using the proxyService and return the response data\n     return this.proxyService.searchProduct(searchProductQuery);\n   }  \n   @Get('ordersme')\n"
                }
            ],
            "date": 1702546715134,
            "name": "Commit-0",
            "content": "import { Controller, Get, Query, Inject } from '@nestjs/common';\nimport { ProxyService } from './proxy.service';\n\n@Controller('digikala')\nexport class DigikalaController {\n  constructor(@Inject(ProxyService) private proxyService: ProxyService) {}\n\n  @Get('search')\n  async searchdigikala(\n    @Query('q') q: string,\n    @Query('page') page: number,\n    @Query('sort') sort: string,\n  ) {\n    // Define the request options\n    const config = {\n      method: 'GET',\n      url: '/search', // This will be rewritten by the proxyService\n      params: {\n        q, // The search term\n        page, // The page number\n        sort, // The sort order\n      },\n    };\n\n    // Make the request using the proxyService and return the response data\n    return this.proxyService.proxyRequest(config);\n  }\n}\n"
        }
    ]
}