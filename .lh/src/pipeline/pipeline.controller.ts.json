{
    "sourceFile": "src/pipeline/pipeline.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 52,
            "patches": [
                {
                    "date": 1708353081592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708353381549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,17 @@\n import { Controller, Get, Param } from '@nestjs/common';\n-\n import { PipelineService } from './pipeline.service';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(private readonly pipelineService: PipelineService) {}\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n-    return this.pipelineService.getPipelineById(pipelineID);\n+    try {\n+      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n\\ No newline at end of file\n+      return this.pipelineService.getPipelineById(pipelineID);\n+    } catch (error) {\n+      return error.message;\n+    }\n   }\n-}\n+}\n"
                },
                {
                    "date": 1708353487861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     try {\n-      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n+      await dela(3, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1708353493743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,18 @@\n import { Controller, Get, Param } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n+import { delay } from 'src/utility/delay';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(private readonly pipelineService: PipelineService) {}\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     try {\n-      await dela(3, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n\\ No newline at end of file\n   }\n-}\n+}\n"
                },
                {
                    "date": 1708353500967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     try {\n-      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1708353565815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,23 @@\n import { Controller, Get, Param } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay } from 'src/utility/delay';\n+import { TokenService } from 'src/token/token.service';\n \n @Controller('pipeline')\n export class PipelineController {\n-  constructor(private readonly pipelineService: PipelineService) {}\n+  constructor(\n+    private readonly tokenService: TokenService,\n+    private readonly pipelineService: PipelineService\n+    ) {}\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n+    const token = this.tokenService.getToken();\n     try {\n       await delay(1, true); // Wait for 3 seconds with resultStatus as true\n\\ No newline at end of file\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n-}\n+}\n"
                },
                {
                    "date": 1708353616804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,13 @@\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     const token = this.tokenService.getToken();\n+    console.log(token.userId)\n     try {\n       await delay(1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1708353804957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     const token = this.tokenService.getToken();\n     console.log(token.userId)\n     try {\n-      await delay(1, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1709105292346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,5 +20,17 @@\n     } catch (error) {\n       return error.message;\n     }\n   }\n-}\n\\ No newline at end of file\n+\n+  @Post('submit')\n+  async create(@Body() payloadArray: any): Promise<EyeProductDTO[]> {\n+    const token = this.tokenService.getToken(); // Retrieve from service\n+    const eyeProducts = mapToEyeProducts(\n+      payloadArray,\n+      token.userId,\n+      token.pipelinesIds,\n+    );\n+    await this.eyeService.saveEyeProduct(eyeProducts);\n+    return mapToEyeProductsDTO(eyeProducts, token.userId, token.pipelinesIds);\n+  }\n+}\n"
                },
                {
                    "date": 1709105353051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Controller, Get, Param } from '@nestjs/common';\n+import { Body, Controller, Get, Param } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n \n@@ -22,15 +22,10 @@\n     }\n   }\n \n   @Post('submit')\n-  async create(@Body() payloadArray: any): Promise<EyeProductDTO[]> {\n+  async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    const eyeProducts = mapToEyeProducts(\n-      payloadArray,\n-      token.userId,\n-      token.pipelinesIds,\n-    );\n-    await this.eyeService.saveEyeProduct(eyeProducts);\n-    return mapToEyeProductsDTO(eyeProducts, token.userId, token.pipelinesIds);\n+    await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n+    return this.pipelineService.getPipelineById(payload);\n   }\n }\n"
                },
                {
                    "date": 1709105362570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Body, Controller, Get, Param } from '@nestjs/common';\n+import { Body, Controller, Get, Param, Post } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n \n"
                },
                {
                    "date": 1709105454723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return this.pipelineService.getPipelineById(payload);\n+    return this.pipelineService.getPipelineById(payload.id);\n   }\n }\n"
                },
                {
                    "date": 1709105528665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return this.pipelineService.getPipelineById(payload.id);\n+    return token;\n   }\n }\n"
                },
                {
                    "date": 1709105552929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return token;\n+    return token.toString();\n   }\n }\n"
                },
                {
                    "date": 1709105584227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return token.toString();\n+    return token.userId.toString();\n   }\n }\n"
                },
                {
                    "date": 1709105674723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return token.userId.toString();\n+    return token.berearValue.toString();\n   }\n }\n"
                },
                {
                    "date": 1709105791276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return token.berearValue.toString();\n+    return token.berearValue;\n   }\n }\n"
                },
                {
                    "date": 1709111370641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<string> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return token.berearValue;\n+    return { token: token.berearValue };\n   }\n }\n"
                },
                {
                    "date": 1709111382907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     }\n   }\n \n   @Post('submit')\n-  async create(@Body() payload: any): Promise<string> {\n+  async create(@Body() payload: any): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     return { token: token.berearValue };\n   }\n"
                },
                {
                    "date": 1709114363896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,7 +25,7 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return { token: token.berearValue };\n+    return { token: token.berearValue,id:payload.id };\n   }\n }\n"
                },
                {
                    "date": 1709117113518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { Body, Controller, Get, Param, Post } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n-import { delay } from 'src/utility/delay';\n+import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n \n @Controller('pipeline')\n export class PipelineController {\n@@ -25,7 +25,8 @@\n   @Post('submit')\n   async create(@Body() payload: any): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    return { token: token.berearValue,id:payload.id };\n+    pipelines();\n+    return  pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709365720504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,27 @@\n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n     private readonly tokenService: TokenService,\n-    private readonly pipelineService: PipelineService\n-    ) {}\n+    private readonly pipelineService: PipelineService,\n+  ) {}\n \n+  @Get()\n+  async getPipelines() {\n+    const token = this.tokenService.getToken();\n+    console.log(token.userId);\n+    try {\n+      await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n+      pipelines();\n+      return pipelines();\n+    } catch (error) {\n+      return error.message;\n+    }\n+  }\n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     const token = this.tokenService.getToken();\n-    console.log(token.userId)\n+    console.log(token.userId);\n     try {\n       await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n@@ -26,7 +38,7 @@\n   async create(@Body() payload: any): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     pipelines();\n-    return  pipelines();\n+    return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709555631817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     }\n   }\n \n   @Post('submit')\n-  async create(@Body() payload: any): Promise<any> {\n+  async create(@Body() pipelineDetail: any): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     pipelines();\n     return pipelines();\n"
                },
                {
                    "date": 1709557769282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { Body, Controller, Get, Param, Post } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n+import { PipelineDetail } from 'src/hamechidun/DTO/Pipelines';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n@@ -34,11 +35,12 @@\n     }\n   }\n \n   @Post('submit')\n-  async create(@Body() pipelineDetail: any): Promise<any> {\n+  async create(@Body() pipelineDetail: PipelineDetail): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n+    await this.pipelineService.saveEyeProduct(eyeProducts);\n     pipelines();\n     return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709704351208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   @Post('submit')\n   async create(@Body() pipelineDetail: PipelineDetail): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    await this.pipelineService.saveEyeProduct(eyeProducts);\n+    await this.pipelineService.saveEyeProduct(pipelineDetail);\n     pipelines();\n     return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709709959181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   @Post('submit')\n   async create(@Body() pipelineDetail: PipelineDetail): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    await this.pipelineService.saveEyeProduct(pipelineDetail);\n+    //await this.pipelineService.saveEyeProduct(pipelineDetail);\n     pipelines();\n     return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709713514136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   @Post('submit')\n   async create(@Body() pipelineDetail: PipelineDetail): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    //await this.pipelineService.saveEyeProduct(pipelineDetail);\n+    await this.pipelineService.saveEyeProduct(pipelineDetail);\n     pipelines();\n     return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709713911572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Body, Controller, Get, Param, Post } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n-import { PipelineDetail } from 'src/hamechidun/DTO/Pipelines';\n+import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n@@ -35,11 +35,11 @@\n     }\n   }\n \n   @Post('submit')\n-  async create(@Body() pipelineDetail: PipelineDetail): Promise<any> {\n+  async create(@Body() pipelineDetail: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n+    //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     await this.pipelineService.saveEyeProduct(pipelineDetail);\n     pipelines();\n     return pipelines();\n   }\n"
                },
                {
                    "date": 1709713930409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { Body, Controller, Get, Param, Post } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n-import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines';\n+import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines.dto';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n"
                },
                {
                    "date": 1709715018308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { PipelineService } from './pipeline.service';\n import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines.dto';\n+import { PipelineStatus } from './PipelineStatus.Entity';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n@@ -35,12 +36,12 @@\n     }\n   }\n \n   @Post('submit')\n-  async create(@Body() pipelineDetail: PipelineStatusDto): Promise<any> {\n+  async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    await this.pipelineService.saveEyeProduct(pipelineDetail);\n+    await this.pipelineService.saveEyeProduct(pipelineStatusRequest);\n     pipelines();\n     return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709716072078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   @Post('submit')\n   async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    await this.pipelineService.saveEyeProduct(pipelineStatusRequest);\n+    await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n     pipelines();\n     return pipelines();\n   }\n }\n"
                },
                {
                    "date": 1709782530897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n       return error.message;\n     }\n   }\n \n-  @Post('submit')\n+  @Post('submitStatus')\n   async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n"
                },
                {
                    "date": 1709786663441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,14 +3,16 @@\n import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines.dto';\n import { PipelineStatus } from './PipelineStatus.Entity';\n+import { MyCacheService } from 'src/myCache/myCache.service';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n     private readonly tokenService: TokenService,\n     private readonly pipelineService: PipelineService,\n+    private readonly myCacheService: MyCacheService,\n   ) {}\n \n   @Get()\n   async getPipelines() {\n"
                },
                {
                    "date": 1709790113679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,21 @@\n   async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n+\n+    this.sendRedis(\"pipeline_\",pipelineStatusRequest); \n     pipelines();\n     return pipelines();\n   }\n+  async sendRedis(preKey:string, pipelineStatusRequest:PipelineStatusDto){\n+    const client = await this.myCacheService.getClient();\n+    const key = `${preKey}:${pipelineStatusRequest.eyeProductId}_${pipelineStatusRequest.pipelineId}`;\n+    const data = {\n+      eyeProductId: pipelineStatusRequest.eyeProductId,\n+      pipelineId: pipelineStatusRequest.pipelineId,\n+      // ... other relevant data\n+    };\n+\n+    await client.setex(key, 3600, JSON.stringify({ data }));\n+  }\n }\n"
                },
                {
                    "date": 1709790139778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     const token = this.tokenService.getToken(); // Retrieve from service\n     //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n \n-    this.sendRedis(\"pipeline_\",pipelineStatusRequest); \n+    await this.sendRedis(\"pipeline_\",pipelineStatusRequest); \n     pipelines();\n     return pipelines();\n   }\n   async sendRedis(preKey:string, pipelineStatusRequest:PipelineStatusDto){\n"
                },
                {
                    "date": 1709790218508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,14 +42,18 @@\n   async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n     await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n-\n-    await this.sendRedis(\"pipeline_\",pipelineStatusRequest); \n+    try {\n+      await this.sendRedis('pipeline_', pipelineStatusRequest);\n+    } catch (error) {\n+      console.error('Error storing data in Redis:', error);\n+      // Implement retry logic or alternative strategy if needed\n+    }\n     pipelines();\n     return pipelines();\n   }\n-  async sendRedis(preKey:string, pipelineStatusRequest:PipelineStatusDto){\n+  async sendRedis(preKey: string, pipelineStatusRequest: PipelineStatusDto) {\n     const client = await this.myCacheService.getClient();\n     const key = `${preKey}:${pipelineStatusRequest.eyeProductId}_${pipelineStatusRequest.pipelineId}`;\n     const data = {\n       eyeProductId: pipelineStatusRequest.eyeProductId,\n"
                },
                {
                    "date": 1711357015310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,87 @@\n-import { Body, Controller, Get, Param, Post } from '@nestjs/common';\n+import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay, pipelines } from 'src/utility/delay';\n import { TokenService } from 'src/token/token.service';\n import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines.dto';\n import { PipelineStatus } from './PipelineStatus.Entity';\n import { MyCacheService } from 'src/myCache/myCache.service';\n+import { RedisSubscriberService } from 'src/myCache/RedisSubscriberService';\n \n+import {\n+  MessagePattern,\n+  Payload,\n+  Ctx,\n+  RedisContext,\n+  ClientProxy,\n+} from '@nestjs/microservices';\n+import { EventEmitter2 } from '@nestjs/event-emitter';\n+\n @Controller('pipeline')\n export class PipelineController {\n   constructor(\n     private readonly tokenService: TokenService,\n     private readonly pipelineService: PipelineService,\n     private readonly myCacheService: MyCacheService,\n+    private readonly redisSubscriberService: RedisSubscriberService,\n+    private eventEmitter: EventEmitter2,\n   ) {}\n+  // async onModuleInit() {\n+  //   await this.redisSubscriberService.subscribeToChannel('response_received');\n+  // }\n+  @Get('pipelineStatusSummery')\n+  async get(@Query() eye: any): Promise<PipelineStatus[]> {\n+    return this.pipelineService.findSummeryPipelineStatusByUser(11015166)\n+  }\n \n-  @Get()\n-  async getPipelines() {\n-    const token = this.tokenService.getToken();\n-    console.log(token.userId);\n+  @Post('submitProccess')\n+  async submitProccess(\n+    @Body() pipelineStatusRequest: PipelineStatusDto,\n+  ): Promise<any> {\n+    const token = this.tokenService.getToken(); // Retrieve from service\n+\n+    await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n     try {\n-      await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-      pipelines();\n-      return pipelines();\n+      let payload = {\n+        channel: 'nest_redis_channel',\n+        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n+      };\n+      this.eventEmitter.emit('pipeline.status.submitted', payload);\n+      return 'pipeline';\n     } catch (error) {\n-      return error.message;\n+      console.error('Error storing data in Redis:', error);\n+      // Implement retry logic or alternative strategy if needed\n     }\n   }\n-  @Get(':pipelineID')\n-  async getPipelineById(@Param('pipelineID') pipelineID: string) {\n-    const token = this.tokenService.getToken();\n-    console.log(token.userId);\n-    try {\n-      await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-      return this.pipelineService.getPipelineById(pipelineID);\n-    } catch (error) {\n-      return error.message;\n-    }\n-  }\n \n   @Post('submitStatus')\n   async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    //await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n+\n+   // await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n     try {\n-      await this.sendRedis('pipeline_', pipelineStatusRequest);\n+      //await this.sendRedis('pipeline_', pipelineStatusRequest);\n+\n+      //Emitting an event with the payload\n+      // this.eventEmitter.emit(\n+      //   'pipeline.status.submitted',\n+      //   `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`\n+      // );\n+\n+      console.log('Step 1 ==>from clinet to Nest ***Rest***');\n+      let payload = {\n+        channel: 'nest_redis_channel',\n+        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n+      };\n+      this.eventEmitter.emit('pipeline.status.submitted', payload);\n+\n+      //await delay(Math.floor(Math.random() * 2) + 1, true); // Wait for 3 seconds with resultStatus as true\n     } catch (error) {\n       console.error('Error storing data in Redis:', error);\n       // Implement retry logic or alternative strategy if needed\n     }\n     pipelines();\n+\n     return pipelines();\n   }\n   async sendRedis(preKey: string, pipelineStatusRequest: PipelineStatusDto) {\n     const client = await this.myCacheService.getClient();\n@@ -62,5 +93,15 @@\n     };\n \n     await client.setex(key, 3600, JSON.stringify({ data }));\n   }\n+\n+  @MessagePattern('published_from_python_pipelineStatus')\n+  async handleProcessedResults(\n+    @Payload() data: any,\n+    @Ctx() context: RedisContext,\n+  ) {\n+    console.log('Step 2 ==>from python to Nest, data==> ' + data + '***Subscribe***');\n+    await delay(Math.floor(Math.random() * 2) + 10, true);\n+    this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n+  }\n }\n"
                },
                {
                    "date": 1711358103639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   // async onModuleInit() {\n   //   await this.redisSubscriberService.subscribeToChannel('response_received');\n   // }\n   @Get('pipelineStatusSummery')\n-  async get(@Query() eye: any): Promise<PipelineStatus[]> {\n+  async get(): Promise<PipelineStatus[]> {\n     return this.pipelineService.findSummeryPipelineStatusByUser(11015166)\n   }\n \n   @Post('submitProccess')\n"
                },
                {
                    "date": 1711358242872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,13 @@\n   ) {}\n   // async onModuleInit() {\n   //   await this.redisSubscriberService.subscribeToChannel('response_received');\n   // }\n-  @Get('pipelineStatusSummery')\n-  async get(): Promise<PipelineStatus[]> {\n-    return this.pipelineService.findSummeryPipelineStatusByUser(11015166)\n+  @Get('pipelineStatusSummery/:eyeProductId')\n+  async get(@Param('eyeProductId') eyeProductId: number): Promise<PipelineStatus[]> {\n+    return this.pipelineService.findSummeryPipelineStatusByUser(eyeProductId);\n   }\n-\n+  \n   @Post('submitProccess')\n   async submitProccess(\n     @Body() pipelineStatusRequest: PipelineStatusDto,\n   ): Promise<any> {\n"
                },
                {
                    "date": 1711358314478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   //   await this.redisSubscriberService.subscribeToChannel('response_received');\n   // }\n   @Get('pipelineStatusSummery/:eyeProductId')\n   async get(@Param('eyeProductId') eyeProductId: number): Promise<PipelineStatus[]> {\n-    return this.pipelineService.findSummeryPipelineStatusByUser(eyeProductId);\n+    return this.pipelineService.findSummeryPipelineStatusByUser(11015166,eyeProductId);\n   }\n   \n   @Post('submitProccess')\n   async submitProccess(\n"
                },
                {
                    "date": 1711370794938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,8 @@\n     @Payload() data: any,\n     @Ctx() context: RedisContext,\n   ) {\n     console.log('Step 2 ==>from python to Nest, data==> ' + data + '***Subscribe***');\n-    await delay(Math.floor(Math.random() * 2) + 10, true);\n+    await delay(Math.floor(Math.random() * 2) + 1, true);\n     this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n   }\n }\n"
                },
                {
                    "date": 1711371056631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n \n     await client.setex(key, 3600, JSON.stringify({ data }));\n   }\n \n-  @MessagePattern('published_from_python_pipelineStatus')\n+  @MessagePattern('processed_and_Published_by_python')\n   async handleProcessedResults(\n     @Payload() data: any,\n     @Ctx() context: RedisContext,\n   ) {\n"
                },
                {
                    "date": 1711372650936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\n+import { PipelineService } from './pipeline.service';\n+import { delay, pipelines } from 'src/utility/delay';\n+import { TokenService } from 'src/token/token.service';\n+import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines.dto';\n+import { PipelineStatus } from './PipelineStatus.Entity';\n+import { MyCacheService } from 'src/myCache/myCache.service';\n+import { RedisSubscriberService } from 'src/myCache/RedisSubscriberService';\n+\n+import {\n+  MessagePattern,\n+  Payload,\n+  Ctx,\n+  RedisContext,\n+  ClientProxy,\n+} from '@nestjs/microservices';\n+import { EventEmitter2 } from '@nestjs/event-emitter';\n+\n+@Controller('pipeline')\n+export class PipelineController {\n+  constructor(\n+    private readonly tokenService: TokenService,\n+    private readonly pipelineService: PipelineService,\n+    private readonly myCacheService: MyCacheService,\n+    private readonly redisSubscriberService: RedisSubscriberService,\n+    private eventEmitter: EventEmitter2,\n+  ) {}\n+  // async onModuleInit() {\n+  //   await this.redisSubscriberService.subscribeToChannel('response_received');\n+  // }\n+  @Get('pipelineStatusSummery/:eyeProductId')\n+  async get(@Param('eyeProductId') eyeProductId: number): Promise<PipelineStatus[]> {\n+    return this.pipelineService.findSummeryPipelineStatusByUser(11015166,eyeProductId);\n+  }\n+  \n+  @Post('submitProccess')\n+  async submitProccess(\n+    @Body() pipelineStatusRequest: PipelineStatusDto,\n+  ): Promise<any> {\n+    const token = this.tokenService.getToken(); // Retrieve from service\n+\n+    await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n+    try {\n+      let payload = {\n+        channel: 'nest_redis_channel',\n+        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n+      };\n+      this.eventEmitter.emit('pipeline.status.submitted', payload);\n+      return 'pipeline';\n+    } catch (error) {\n+      console.error('Error storing data in Redis:', error);\n+      // Implement retry logic or alternative strategy if needed\n+    }\n+  }\n+\n+  @Post('submitStatus')\n+  async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n+    const token = this.tokenService.getToken(); // Retrieve from service\n+\n+   // await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n+    try {\n+      //await this.sendRedis('pipeline_', pipelineStatusRequest);\n+\n+      //Emitting an event with the payload\n+      // this.eventEmitter.emit(\n+      //   'pipeline.status.submitted',\n+      //   `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`\n+      // );\n+\n+      console.log('Step 1 ==>from clinet to Nest ***Rest***');\n+      let payload = {\n+        channel: 'nest_redis_channel',\n+        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n+      };\n+      this.eventEmitter.emit('pipeline.status.submitted', payload);\n+\n+      //await delay(Math.floor(Math.random() * 2) + 1, true); // Wait for 3 seconds with resultStatus as true\n+    } catch (error) {\n+      console.error('Error storing data in Redis:', error);\n+      // Implement retry logic or alternative strategy if needed\n+    }\n+    const processResult = {\n+      status: 'Success',\n+      startDate: '2024-03-06T04:30:00.000Z',\n+    };\n+\n+    return {\n+      id: 1,\n+      eyeProductId: 123847,\n+      pipelineId: 456,\n+      processResult: processResult,\n+    };\n+    \n+  }\n+  async sendRedis(preKey: string, pipelineStatusRequest: PipelineStatusDto) {\n+    const client = await this.myCacheService.getClient();\n+    const key = `${preKey}:${pipelineStatusRequest.eyeProductId}_${pipelineStatusRequest.pipelineId}`;\n+    const data = {\n+      eyeProductId: pipelineStatusRequest.eyeProductId,\n+      pipelineId: pipelineStatusRequest.pipelineId,\n+      // ... other relevant data\n+    };\n+\n+    await client.setex(key, 3600, JSON.stringify({ data }));\n+  }\n+\n+  @MessagePattern('processed_and_Published_by_python')\n+  async handleProcessedResults(\n+    @Payload() data: any,\n+    @Ctx() context: RedisContext,\n+  ) {\n+    console.log('Step 2 ==>from python to Nest, data==> ' + data + '***Subscribe***');\n+    await delay(Math.floor(Math.random() * 2) + 1, true);\n+    this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n+  }\n+}\n"
                },
                {
                    "date": 1711375311507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n \n-      //await delay(Math.floor(Math.random() * 2) + 1, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(Math.floor(Math.random() * 2) + 5, true); // Wait for 3 seconds with resultStatus as true\n     } catch (error) {\n       console.error('Error storing data in Redis:', error);\n       // Implement retry logic or alternative strategy if needed\n     }\n@@ -113,111 +113,4 @@\n     await delay(Math.floor(Math.random() * 2) + 1, true);\n     this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n   }\n }\n-import { Body, Controller, Get, Param, Post, Query } from '@nestjs/common';\n-import { PipelineService } from './pipeline.service';\n-import { delay, pipelines } from 'src/utility/delay';\n-import { TokenService } from 'src/token/token.service';\n-import { PipelineStatusDto } from 'src/hamechidun/DTO/Pipelines.dto';\n-import { PipelineStatus } from './PipelineStatus.Entity';\n-import { MyCacheService } from 'src/myCache/myCache.service';\n-import { RedisSubscriberService } from 'src/myCache/RedisSubscriberService';\n-\n-import {\n-  MessagePattern,\n-  Payload,\n-  Ctx,\n-  RedisContext,\n-  ClientProxy,\n-} from '@nestjs/microservices';\n-import { EventEmitter2 } from '@nestjs/event-emitter';\n-\n-@Controller('pipeline')\n-export class PipelineController {\n-  constructor(\n-    private readonly tokenService: TokenService,\n-    private readonly pipelineService: PipelineService,\n-    private readonly myCacheService: MyCacheService,\n-    private readonly redisSubscriberService: RedisSubscriberService,\n-    private eventEmitter: EventEmitter2,\n-  ) {}\n-  // async onModuleInit() {\n-  //   await this.redisSubscriberService.subscribeToChannel('response_received');\n-  // }\n-  @Get('pipelineStatusSummery/:eyeProductId')\n-  async get(@Param('eyeProductId') eyeProductId: number): Promise<PipelineStatus[]> {\n-    return this.pipelineService.findSummeryPipelineStatusByUser(11015166,eyeProductId);\n-  }\n-  \n-  @Post('submitProccess')\n-  async submitProccess(\n-    @Body() pipelineStatusRequest: PipelineStatusDto,\n-  ): Promise<any> {\n-    const token = this.tokenService.getToken(); // Retrieve from service\n-\n-    await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n-    try {\n-      let payload = {\n-        channel: 'nest_redis_channel',\n-        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n-      };\n-      this.eventEmitter.emit('pipeline.status.submitted', payload);\n-      return 'pipeline';\n-    } catch (error) {\n-      console.error('Error storing data in Redis:', error);\n-      // Implement retry logic or alternative strategy if needed\n-    }\n-  }\n-\n-  @Post('submitStatus')\n-  async create(@Body() pipelineStatusRequest: PipelineStatusDto): Promise<any> {\n-    const token = this.tokenService.getToken(); // Retrieve from service\n-\n-   // await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n-    try {\n-      //await this.sendRedis('pipeline_', pipelineStatusRequest);\n-\n-      //Emitting an event with the payload\n-      // this.eventEmitter.emit(\n-      //   'pipeline.status.submitted',\n-      //   `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`\n-      // );\n-\n-      console.log('Step 1 ==>from clinet to Nest ***Rest***');\n-      let payload = {\n-        channel: 'nest_redis_channel',\n-        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n-      };\n-      this.eventEmitter.emit('pipeline.status.submitted', payload);\n-\n-      //await delay(Math.floor(Math.random() * 2) + 1, true); // Wait for 3 seconds with resultStatus as true\n-    } catch (error) {\n-      console.error('Error storing data in Redis:', error);\n-      // Implement retry logic or alternative strategy if needed\n-    }\n-    pipelines();\n-\n-    return pipelines();\n-  }\n-  async sendRedis(preKey: string, pipelineStatusRequest: PipelineStatusDto) {\n-    const client = await this.myCacheService.getClient();\n-    const key = `${preKey}:${pipelineStatusRequest.eyeProductId}_${pipelineStatusRequest.pipelineId}`;\n-    const data = {\n-      eyeProductId: pipelineStatusRequest.eyeProductId,\n-      pipelineId: pipelineStatusRequest.pipelineId,\n-      // ... other relevant data\n-    };\n-\n-    await client.setex(key, 3600, JSON.stringify({ data }));\n-  }\n-\n-  @MessagePattern('processed_and_Published_by_python')\n-  async handleProcessedResults(\n-    @Payload() data: any,\n-    @Ctx() context: RedisContext,\n-  ) {\n-    console.log('Step 2 ==>from python to Nest, data==> ' + data + '***Subscribe***');\n-    await delay(Math.floor(Math.random() * 2) + 1, true);\n-    this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n-  }\n-}\n"
                },
                {
                    "date": 1712561797803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,7 @@\n     @Payload() data: any,\n     @Ctx() context: RedisContext,\n   ) {\n     console.log('Step 2 ==>from python to Nest, data==> ' + data + '***Subscribe***');\n-    await delay(Math.floor(Math.random() * 2) + 1, true);\n     this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n   }\n }\n"
                },
                {
                    "date": 1712646119942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,8 @@\n   async handleProcessedResults(\n     @Payload() data: any,\n     @Ctx() context: RedisContext,\n   ) {\n-    console.log('Step 2 ==>from python to Nest, data==> ' + data + '***Subscribe***');\n+    console.log('Step 3 ==> Reply back from Python to Nest, data==> ' + data + '***Redis Pub/Sub***');\n     this.eventEmitter.emit('published_from_NestToSocket_pipelineStatus', data);\n   }\n }\n"
                },
                {
                    "date": 1712655867376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n     try {\n       let payload = {\n         channel: 'nest_redis_channel',\n-        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n+        message: `${pipelineStatusRequest.pipelineId}-${pipelineStatusRequest.eyeProductId}`,\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n       return 'pipeline';\n     } catch (error) {\n"
                },
                {
                    "date": 1712656556388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,12 @@\n     await this.pipelineService.savePipelineStatus(pipelineStatusRequest);\n     try {\n       let payload = {\n         channel: 'nest_redis_channel',\n-        message: `${pipelineStatusRequest.pipelineId}-${pipelineStatusRequest.eyeProductId}`,\n+        message: {\n+          pipelineId: pipelineStatusRequest.pipelineId,\n+          eyeProductId: pipelineStatusRequest.eyeProductId\n+        }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n       return 'pipeline';\n     } catch (error) {\n"
                },
                {
                    "date": 1712656885324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n     try {\n       let payload = {\n         channel: 'nest_redis_channel',\n         message: {\n-          pipelineId: pipelineStatusRequest.pipelineId,\n-          eyeProductId: pipelineStatusRequest.eyeProductId\n+          pipelineId: pipelineStatusRequest.pipelineId.toString(),\n+          eyeProductId: pipelineStatusRequest.eyeProductId.toString()\n         }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n       return 'pipeline';\n"
                },
                {
                    "date": 1712657053527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n     try {\n       let payload = {\n         channel: 'nest_redis_channel',\n         message: {\n-          pipelineId: pipelineStatusRequest.pipelineId.toString(),\n-          eyeProductId: pipelineStatusRequest.eyeProductId.toString()\n+          \"pipelineId\": pipelineStatusRequest.pipelineId.toString(),\n+          \"eyeProductId\": pipelineStatusRequest.eyeProductId.toString()\n         }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n       return 'pipeline';\n"
                },
                {
                    "date": 1712657118055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,10 @@\n     try {\n       let payload = {\n         channel: 'nest_redis_channel',\n         message: {\n-          \"pipelineId\": pipelineStatusRequest.pipelineId.toString(),\n-          \"eyeProductId\": pipelineStatusRequest.eyeProductId.toString()\n+          pipelineId: pipelineStatusRequest.pipelineId.toString(),\n+          eyeProductId: pipelineStatusRequest.eyeProductId.toString()\n         }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n       return 'pipeline';\n@@ -72,9 +72,12 @@\n \n       console.log('Step 1 ==>from clinet to Nest ***Rest***');\n       let payload = {\n         channel: 'nest_redis_channel',\n-        message: `${pipelineStatusRequest.eyeProductId}-${pipelineStatusRequest.pipelineId}`,\n+        message: {\n+          pipelineId: pipelineStatusRequest.pipelineId.toString(),\n+          eyeProductId: pipelineStatusRequest.eyeProductId.toString()\n+        }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n \n       await delay(Math.floor(Math.random() * 2) + 5, true); // Wait for 3 seconds with resultStatus as true\n"
                },
                {
                    "date": 1712657568686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,10 @@\n       console.log('Step 1 ==>from clinet to Nest ***Rest***');\n       let payload = {\n         channel: 'nest_redis_channel',\n         message: {\n-          pipelineId: pipelineStatusRequest.pipelineId.toString(),\n-          eyeProductId: pipelineStatusRequest.eyeProductId.toString()\n+          pipelineId: pipelineStatusRequest.pipelineId,\n+          eyeProductId: pipelineStatusRequest.eyeProductId\n         }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n \n"
                },
                {
                    "date": 1712659832419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n       let payload = {\n         channel: 'nest_redis_channel',\n         message: {\n           pipelineId: pipelineStatusRequest.pipelineId,\n-          eyeProductId: pipelineStatusRequest.eyeProductId\n+          eyeProductId: 12017522//pipelineStatusRequest.eyeProductId\n         }\n       };\n       this.eventEmitter.emit('pipeline.status.submitted', payload);\n \n"
                }
            ],
            "date": 1708353081591,
            "name": "Commit-0",
            "content": "import { Controller, Get, Param } from '@nestjs/common';\n\nimport { PipelineService } from './pipeline.service';\n\n@Controller('pipeline')\nexport class PipelineController {\n  constructor(private readonly pipelineService: PipelineService) {}\n\n  @Get(':pipelineID')\n  async getPipelineById(@Param('pipelineID') pipelineID: string) {\n    return this.pipelineService.getPipelineById(pipelineID);\n  }\n}"
        }
    ]
}