{
    "sourceFile": "src/pipeline/pipeline.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1708353081592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708353381549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,17 @@\n import { Controller, Get, Param } from '@nestjs/common';\n-\n import { PipelineService } from './pipeline.service';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(private readonly pipelineService: PipelineService) {}\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n-    return this.pipelineService.getPipelineById(pipelineID);\n+    try {\n+      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n\\ No newline at end of file\n+      return this.pipelineService.getPipelineById(pipelineID);\n+    } catch (error) {\n+      return error.message;\n+    }\n   }\n-}\n+}\n"
                },
                {
                    "date": 1708353487861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,11 @@\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     try {\n-      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n+      await dela(3, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1708353493743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,18 @@\n import { Controller, Get, Param } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n+import { delay } from 'src/utility/delay';\n \n @Controller('pipeline')\n export class PipelineController {\n   constructor(private readonly pipelineService: PipelineService) {}\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     try {\n-      await dela(3, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n\\ No newline at end of file\n   }\n-}\n+}\n"
                },
                {
                    "date": 1708353500967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     try {\n-      await delay(3, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1708353565815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,23 @@\n import { Controller, Get, Param } from '@nestjs/common';\n import { PipelineService } from './pipeline.service';\n import { delay } from 'src/utility/delay';\n+import { TokenService } from 'src/token/token.service';\n \n @Controller('pipeline')\n export class PipelineController {\n-  constructor(private readonly pipelineService: PipelineService) {}\n+  constructor(\n+    private readonly tokenService: TokenService,\n+    private readonly pipelineService: PipelineService\n+    ) {}\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n+    const token = this.tokenService.getToken();\n     try {\n       await delay(1, true); // Wait for 3 seconds with resultStatus as true\n\\ No newline at end of file\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n-}\n+}\n"
                },
                {
                    "date": 1708353616804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,13 @@\n \n   @Get(':pipelineID')\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     const token = this.tokenService.getToken();\n+    console.log(token.userId)\n     try {\n       await delay(1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                },
                {
                    "date": 1708353804957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,11 @@\n   async getPipelineById(@Param('pipelineID') pipelineID: string) {\n     const token = this.tokenService.getToken();\n     console.log(token.userId)\n     try {\n-      await delay(1, true); // Wait for 3 seconds with resultStatus as true\n+      await delay(Math.floor(Math.random() * 3) + 1, true); // Wait for 3 seconds with resultStatus as true\n       return this.pipelineService.getPipelineById(pipelineID);\n     } catch (error) {\n       return error.message;\n     }\n   }\n\\ No newline at end of file\n-}\n+}\n"
                }
            ],
            "date": 1708353081591,
            "name": "Commit-0",
            "content": "import { Controller, Get, Param } from '@nestjs/common';\n\nimport { PipelineService } from './pipeline.service';\n\n@Controller('pipeline')\nexport class PipelineController {\n  constructor(private readonly pipelineService: PipelineService) {}\n\n  @Get(':pipelineID')\n  async getPipelineById(@Param('pipelineID') pipelineID: string) {\n    return this.pipelineService.getPipelineById(pipelineID);\n  }\n}"
        }
    ]
}