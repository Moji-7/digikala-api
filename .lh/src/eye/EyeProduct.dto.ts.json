{
    "sourceFile": "src/eye/EyeProduct.dto.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1708237089443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708237792818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n     length?: number;\r\n   };\r\n \r\n \r\n-  export function mapToEyeProducts(payloadItems: any[]): EyeProduct[] {\r\n-    return plainToInstance(EyeProduct, payloadItems, { strategy: 'exposeAll' });\r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number): EyeProduct[] {\r\n+    return plainToInstance(EyeProduct,     \r\n+      payloadItems.map((item) => ({ ...item, userId }))\r\n+    , { strategy: 'exposeAll' });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708237838198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,8 @@\n \r\n \r\n   export function mapToEyeProducts(payloadItems: any[], userId: number): EyeProduct[] {\r\n     return plainToInstance(EyeProduct,     \r\n-      payloadItems.map((item) => ({ ...item, userId }))\r\n-    , { strategy: 'exposeAll' });\r\n+      payloadItems.map((item) => ({ ...item, userId })),\r\n+      { strategy: 'exposeAll' });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708240914095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n     length?: number;\r\n   };\r\n \r\n \r\n-  export function mapToEyeProducts(payloadItems: any[], userId: number): EyeProduct[] {\r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n     return plainToInstance(EyeProduct,     \r\n-      payloadItems.map((item) => ({ ...item, userId })),\r\n+      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n       { strategy: 'exposeAll' });\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708334871646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,9 @@\n \r\n   export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n     return plainToInstance(EyeProduct,     \r\n       payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n-      { strategy: 'exposeAll' });\r\n+      //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n+     // { strategy: 'exposeAll' }\r\n+      );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708334926346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n \r\n   export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n     return plainToInstance(EyeProduct,     \r\n       payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+      \r\n       //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n      // { strategy: 'exposeAll' }\r\n       );\r\n   }\r\n"
                },
                {
                    "date": 1708335320440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { plainToInstance } from \"class-transformer\";\r\n+import { plainToInstance, } from \"class-transformer\";\r\n import { EyeProduct } from \"./EyeProduct.entity\";\r\n   \r\n export interface EyeProductResponse {\r\n     eyeProducts: EyeProduct[];\r\n@@ -13,13 +13,18 @@\n     length?: number;\r\n   };\r\n \r\n \r\n-  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n-    return plainToInstance(EyeProduct,     \r\n-      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n-      \r\n-      //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n-     // { strategy: 'exposeAll' }\r\n-      );\r\n+  // export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n+  //   return plainToInstance(EyeProduct,     \r\n+  //     payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+\r\n+  //     //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n+  //    // { strategy: 'exposeAll' }\r\n+  //     );\r\n+\r\n+\r\n+export function mapToEyeProducts(payloadItems: string[], userId: number, pipelinesIds: string): EyeProduct[] {\r\n+  return payloadItems.flatMap(rawJson => plainToInstance(EyeProduct, payloadItems)).map(dto => ({ ...dto, userId, pipelinesIds }));\r\n+\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708335360194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,8 @@\n   //     );\r\n \r\n \r\n export function mapToEyeProducts(payloadItems: string[], userId: number, pipelinesIds: string): EyeProduct[] {\r\n-  return payloadItems.flatMap(rawJson => plainToInstance(EyeProduct, payloadItems)).map(dto => ({ ...dto, userId, pipelinesIds }));\r\n+  return payloadItems.flatMap(rawJson => plainToInstance(EyeProduct, rawJson)).map(dto => ({ ...dto, userId, pipelinesIds }));\r\n \r\n   }\r\n \r\n"
                },
                {
                    "date": 1708335735499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { plainToInstance, } from \"class-transformer\";\r\n+import { Expose, plainToInstance, } from \"class-transformer\";\r\n import { EyeProduct } from \"./EyeProduct.entity\";\r\n   \r\n export interface EyeProductResponse {\r\n     eyeProducts: EyeProduct[];\r\n@@ -12,9 +12,29 @@\n     page?: number;\r\n     length?: number;\r\n   };\r\n \r\n+  export class EyeProductDTO {\r\n+    @Expose()\r\n+    public id!: number;\r\n+  \r\n+    @Expose()\r\n+    public userId!: number;\r\n+  \r\n+    @Expose()\r\n+    public productId!: number;\r\n+  \r\n+    @Expose()\r\n+    public titleFa!: string | null;\r\n+  \r\n+    @Expose()\r\n+    public info!: string | null;\r\n+  \r\n+    @Expose()\r\n+    public pipelinesIds!: string;\r\n+  }\r\n \r\n+\r\n   // export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n   //   return plainToInstance(EyeProduct,     \r\n   //     payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n \r\n"
                },
                {
                    "date": 1708335901937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Expose, plainToInstance, } from \"class-transformer\";\r\n+import { Expose, instanceToPlain, plainToInstance, } from \"class-transformer\";\r\n import { EyeProduct } from \"./EyeProduct.entity\";\r\n   \r\n export interface EyeProductResponse {\r\n     eyeProducts: EyeProduct[];\r\n@@ -33,18 +33,28 @@\n     public pipelinesIds!: string;\r\n   }\r\n \r\n \r\n-  // export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n-  //   return plainToInstance(EyeProduct,     \r\n-  //     payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n+    return instanceToPlain(EyeProduct,     \r\n+      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n \r\n   //     //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n   //    // { strategy: 'exposeAll' }\r\n   //     );\r\n \r\n \r\n-export function mapToEyeProducts(payloadItems: string[], userId: number, pipelinesIds: string): EyeProduct[] {\r\n-  return payloadItems.flatMap(rawJson => plainToInstance(EyeProduct, rawJson)).map(dto => ({ ...dto, userId, pipelinesIds }));\r\n-\r\n+  export function mapToEyeProducts(payloadItems: any[]): InstanceType<typeof EyeProduct>[] {\r\n+    return payloadItems.reduce((accumulator, item) => {\r\n+      accumulator.push(\r\n+        instanceToPlain(new EyeProduct({ ...item, createdAt: new Date() }), {\r\n+          groups: ['omitUnknownKeys'],\r\n+          enableImmutableObjects: true,\r\n+          exposeUnsetFields: false,\r\n+          ignoreDecorators: false,\r\n+          strategy: 'excludeAll',\r\n+        }) as InstanceType<typeof EyeProduct>,\r\n+      );\r\n+      return accumulator;\r\n+    }, []);\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708335918501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n     public pipelinesIds!: string;\r\n   }\r\n \r\n \r\n-  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n-    return instanceToPlain(EyeProduct,     \r\n-      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+  // export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n+  //   return instanceToPlain(EyeProduct,     \r\n+  //     payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n \r\n   //     //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n   //    // { strategy: 'exposeAll' }\r\n   //     );\r\n"
                },
                {
                    "date": 1708336521836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,27 +12,27 @@\n     page?: number;\r\n     length?: number;\r\n   };\r\n \r\n-  export class EyeProductDTO {\r\n-    @Expose()\r\n-    public id!: number;\r\n+  // export class EyeProductDTO {\r\n+  //   @Expose()\r\n+  //   public id!: number;\r\n   \r\n-    @Expose()\r\n-    public userId!: number;\r\n+  //   @Expose()\r\n+  //   public userId!: number;\r\n   \r\n-    @Expose()\r\n-    public productId!: number;\r\n+  //   @Expose()\r\n+  //   public productId!: number;\r\n   \r\n-    @Expose()\r\n-    public titleFa!: string | null;\r\n+  //   @Expose()\r\n+  //   public titleFa!: string | null;\r\n   \r\n-    @Expose()\r\n-    public info!: string | null;\r\n+  //   @Expose()\r\n+  //   public info!: string | null;\r\n   \r\n-    @Expose()\r\n-    public pipelinesIds!: string;\r\n-  }\r\n+  //   @Expose()\r\n+  //   public pipelinesIds!: string;\r\n+  // }\r\n \r\n \r\n   // export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n   //   return instanceToPlain(EyeProduct,     \r\n@@ -45,9 +45,9 @@\n \r\n   export function mapToEyeProducts(payloadItems: any[]): InstanceType<typeof EyeProduct>[] {\r\n     return payloadItems.reduce((accumulator, item) => {\r\n       accumulator.push(\r\n-        instanceToPlain(new EyeProduct({ ...item, createdAt: new Date() }), {\r\n+        instanceToPlain(new EyeProduct({ ...item}), {  \r\n           groups: ['omitUnknownKeys'],\r\n           enableImmutableObjects: true,\r\n           exposeUnsetFields: false,\r\n           ignoreDecorators: false,\r\n"
                },
                {
                    "date": 1708336891308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Expose, instanceToPlain, plainToInstance, } from \"class-transformer\";\r\n+import { plainToInstance,ParseOb } from \"class-transformer\";\r\n import { EyeProduct } from \"./EyeProduct.entity\";\r\n   \r\n export interface EyeProductResponse {\r\n     eyeProducts: EyeProduct[];\r\n@@ -12,49 +12,17 @@\n     page?: number;\r\n     length?: number;\r\n   };\r\n \r\n-  // export class EyeProductDTO {\r\n-  //   @Expose()\r\n-  //   public id!: number;\r\n-  \r\n-  //   @Expose()\r\n-  //   public userId!: number;\r\n-  \r\n-  //   @Expose()\r\n-  //   public productId!: number;\r\n-  \r\n-  //   @Expose()\r\n-  //   public titleFa!: string | null;\r\n-  \r\n-  //   @Expose()\r\n-  //   public info!: string | null;\r\n-  \r\n-  //   @Expose()\r\n-  //   public pipelinesIds!: string;\r\n-  // }\r\n \r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n+    return plainToInstance(EyeProduct,     \r\n+      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+      {groups: ['omitUnknownKeys']}\r\n \r\n-  // export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n-  //   return instanceToPlain(EyeProduct,     \r\n-  //     payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+      //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n+     // { strategy: 'exposeAll' }\r\n+      );\r\n \r\n-  //     //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n-  //    // { strategy: 'exposeAll' }\r\n-  //     );\r\n \r\n-\r\n-  export function mapToEyeProducts(payloadItems: any[]): InstanceType<typeof EyeProduct>[] {\r\n-    return payloadItems.reduce((accumulator, item) => {\r\n-      accumulator.push(\r\n-        instanceToPlain(new EyeProduct({ ...item}), {  \r\n-          groups: ['omitUnknownKeys'],\r\n-          enableImmutableObjects: true,\r\n-          exposeUnsetFields: false,\r\n-          ignoreDecorators: false,\r\n-          strategy: 'excludeAll',\r\n-        }) as InstanceType<typeof EyeProduct>,\r\n-      );\r\n-      return accumulator;\r\n-    }, []);\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708336916781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { plainToInstance,ParseOb } from \"class-transformer\";\r\n+import { plainToInstance,instanceToInstance,instanceToPlain } from \"class-transformer\";\r\n import { EyeProduct } from \"./EyeProduct.entity\";\r\n   \r\n export interface EyeProductResponse {\r\n     eyeProducts: EyeProduct[];\r\n"
                },
                {
                    "date": 1708337334015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,16 +13,16 @@\n     length?: number;\r\n   };\r\n \r\n \r\n-  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n-    return plainToInstance(EyeProduct,     \r\n-      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n-      {groups: ['omitUnknownKeys']}\r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number, pipelinesIds: string): EyeProduct[] {\r\n+    return plainToInstance(EyeProduct, payloadItems.map((item) => ({\r\n+        ...item,\r\n+        userId,\r\n+        pipelinesIds,\r\n+    })), {\r\n+        excludeExtraneousValues: true, // Explicitly exclude extra properties\r\n+    });\r\n \r\n-      //If you want to only expose the properties decorated with @Expose, you should remove the exposeAll strategy:\r\n-     // { strategy: 'exposeAll' }\r\n-      );\r\n \r\n-\r\n   }\r\n \r\n"
                },
                {
                    "date": 1708337413154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         ...item,\r\n         userId,\r\n         pipelinesIds,\r\n     })), {\r\n-        excludeExtraneousValues: true, // Explicitly exclude extra properties\r\n+      //  excludeExtraneousValues: true, // Explicitly exclude extra properties\r\n     });\r\n \r\n \r\n   }\r\n"
                },
                {
                    "date": 1708337481833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { plainToInstance,instanceToInstance,instanceToPlain } from \"class-transformer\";\r\n+import { plainToInstance,instanceToInstance,instanceToPlain, Expose } from \"class-transformer\";\r\n import { EyeProduct } from \"./EyeProduct.entity\";\r\n   \r\n export interface EyeProductResponse {\r\n     eyeProducts: EyeProduct[];\r\n@@ -13,15 +13,34 @@\n     length?: number;\r\n   };\r\n \r\n \r\n-  export function mapToEyeProducts(payloadItems: any[], userId: number, pipelinesIds: string): EyeProduct[] {\r\n-    return plainToInstance(EyeProduct, payloadItems.map((item) => ({\r\n+  export class EyeProductDTO {\r\n+    @Expose()\r\n+    public id!: number;\r\n+  \r\n+    @Expose()\r\n+    public userId!: number;\r\n+  \r\n+    @Expose()\r\n+    public productId!: number;\r\n+  \r\n+    @Expose()\r\n+    public titleFa!: string | null;\r\n+  \r\n+    @Expose()\r\n+    public info!: string | null;\r\n+  \r\n+    @Expose()\r\n+    public pipelinesIds!: string;\r\n+  }\r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number, pipelinesIds: string): EyeProductDTO[] {\r\n+    return plainToInstance(EyeProductDTO, payloadItems.map((item) => ({\r\n         ...item,\r\n         userId,\r\n         pipelinesIds,\r\n     })), {\r\n-      //  excludeExtraneousValues: true, // Explicitly exclude extra properties\r\n+        excludeExtraneousValues: true, // Explicitly exclude extra properties\r\n     });\r\n \r\n \r\n   }\r\n"
                },
                {
                    "date": 1708337791098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     page?: number;\r\n     length?: number;\r\n   };\r\n \r\n-\r\n+  \r\n   export class EyeProductDTO {\r\n     @Expose()\r\n     public id!: number;\r\n   \r\n@@ -32,9 +32,17 @@\n   \r\n     @Expose()\r\n     public pipelinesIds!: string;\r\n   }\r\n-  export function mapToEyeProducts(payloadItems: any[], userId: number, pipelinesIds: string): EyeProductDTO[] {\r\n+\r\n+  export function mapToEyeProducts(payloadItems: any[], userId: number,pipelinesIds:string): EyeProduct[] {\r\n+    return plainToInstance(EyeProduct,     \r\n+      payloadItems.map((item) => ({ ...item, userId,pipelinesIds })),\r\n+      );\r\n+    }\r\n+\r\n+      \r\n+  export function mapToEyeProductsDTO(payloadItems: any[], userId: number, pipelinesIds: string): EyeProductDTO[] {\r\n     return plainToInstance(EyeProductDTO, payloadItems.map((item) => ({\r\n         ...item,\r\n         userId,\r\n         pipelinesIds,\r\n@@ -42,6 +50,7 @@\n         excludeExtraneousValues: true, // Explicitly exclude extra properties\r\n     });\r\n \r\n \r\n+\r\n   }\r\n \r\n"
                }
            ],
            "date": 1708237089443,
            "name": "Commit-0",
            "content": "import { plainToInstance } from \"class-transformer\";\r\nimport { EyeProduct } from \"./EyeProduct.entity\";\r\n  \r\nexport interface EyeProductResponse {\r\n    eyeProducts: EyeProduct[];\r\n    count: number;\r\n  }\r\nexport type EyeProductParams = {\r\n    productId: number;\r\n    productTitle: string;\r\n    createdAt: Date;\r\n    page?: number;\r\n    length?: number;\r\n  };\r\n\r\n\r\n  export function mapToEyeProducts(payloadItems: any[]): EyeProduct[] {\r\n    return plainToInstance(EyeProduct, payloadItems, { strategy: 'exposeAll' });\r\n  }\r\n\r\n"
        }
    ]
}