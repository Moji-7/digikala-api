{
    "sourceFile": "src/eye/eye.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1708231573922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708231750623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n-import { AuthService } from 'src/AuthService';\n+//import { AuthService } from 'src/AuthService';\n import { Request } from 'express';\n \n @Controller('eye')\n export class EyeController {\n"
                },
                {
                    "date": 1708231773421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,11 @@\n import { EyeProduct } from './EyeProduct.entity';\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n-import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n-//import { AuthService } from 'src/AuthService';\n-import { Request } from 'express';\n+// import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n+// import { AuthService } from 'src/AuthService';\n+// import { Request } from 'express';\n \n @Controller('eye')\n export class EyeController {\n   constructor(\n@@ -39,9 +39,9 @@\n // Assuming you have defined appropriate types and decorators for your classes\n \n \n   @Post('submitItems')\n-  @UseInterceptors(HttpServiceAuthInterceptor)\n+  //@UseInterceptors(HttpServiceAuthInterceptor)\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n    // const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n"
                },
                {
                    "date": 1708232306412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { EyeProduct } from './EyeProduct.entity';\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n+import { BearerToken } from 'src/BearerToken';\n // import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n // import { AuthService } from 'src/AuthService';\n // import { Request } from 'express';\n \n@@ -40,13 +41,18 @@\n \n \n   @Post('submitItems')\n   //@UseInterceptors(HttpServiceAuthInterceptor)\n+  handlePost(@BearerToken() token: string) {\n+    // You can now use the token directly.\n+    console.log(token);\n+  }\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n    // const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n+    \n     return await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n"
                },
                {
                    "date": 1708233517588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n     // You can now use the token directly.\n     console.log(token);\n   }\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n-   // const authorizationHeader = request.headers.authorization;\n+   //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n     \n"
                },
                {
                    "date": 1708233618181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,11 @@\n // Assuming you have defined appropriate types and decorators for your classes\n \n \n   @Post('submitItems')\n-  //@UseInterceptors(HttpServiceAuthInterceptor)\n-  handlePost(@BearerToken() token: string) {\n-    // You can now use the token directly.\n-    console.log(token);\n-  }\n+  // handlePost(@BearerToken() token: string) {\n+  //   console.log(token);\n+  // }\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n    //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n"
                },
                {
                    "date": 1708233826343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,17 +13,21 @@\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n import { BearerToken } from 'src/BearerToken';\n+import { TokenService } from 'src/interceptors/token.service';\n // import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n // import { AuthService } from 'src/AuthService';\n // import { Request } from 'express';\n \n @Controller('eye')\n export class EyeController {\n   constructor(\n    // private authService: AuthService,\n-    private readonly eyeService: EyeService) {}\n+   private readonly tokenService: TokenService,\n+    private readonly eyeService: EyeService\n+    \n+    ) {}\n \n \n \n   //   http://localhost:3222/eye/EyeProduct\n@@ -44,9 +48,10 @@\n   // handlePost(@BearerToken() token: string) {\n   //   console.log(token);\n   // }\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n-   //const authorizationHeader = request.headers.authorization;\n+    const token = this.tokenService.getToken(); // Retrieve from service\n+    //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n     \n"
                },
                {
                    "date": 1708234684291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,22 +29,9 @@\n     ) {}\n \n \n \n-  //   http://localhost:3222/eye/EyeProduct\n-  //   {\n-  //     \"userId\": 1,\n-  //     \"productId\": 123,\n-  //     \"productTile\":\"کرم کلینیک\",\n-  //     \"info\": \"Sample info\",\n-  //     \"pipelinesIds\": \"1,2,3\"\n-  //   }\n \n-\n-\n-// Assuming you have defined appropriate types and decorators for your classes\n-\n-\n   @Post('submitItems')\n   // handlePost(@BearerToken() token: string) {\n   //   console.log(token);\n   // }\n"
                },
                {
                    "date": 1708234826590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n import { BearerToken } from 'src/BearerToken';\n-import { TokenService } from 'src/interceptors/token.service';\n+import { TokenService } from 'src/token/token.service';\n+\n // import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n // import { AuthService } from 'src/AuthService';\n // import { Request } from 'express';\n \n"
                },
                {
                    "date": 1708234836827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n import { EyeProduct } from './EyeProduct.entity';\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n-import { BearerToken } from 'src/BearerToken';\n import { TokenService } from 'src/token/token.service';\n \n // import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n // import { AuthService } from 'src/AuthService';\n"
                },
                {
                    "date": 1708234899796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n   //   console.log(token);\n   // }\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n+    console.log(token)\n     //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n"
                },
                {
                    "date": 1708235308447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,9 @@\n \n \n \n   @Post('submitItems')\n-  // handlePost(@BearerToken() token: string) {\n-  //   console.log(token);\n-  // }\n+\n   async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     console.log(token)\n     //const authorizationHeader = request.headers.authorization;\n"
                },
                {
                    "date": 1708236491527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,16 +32,16 @@\n \n \n   @Post('submitItems')\n \n-  async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n+  async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     console.log(token)\n     //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n-    \n+    debugger;\n     return await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n"
                },
                {
                    "date": 1708236544654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,10 @@\n     //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n-    debugger;\n-    return await this.eyeService.saveEyeProduct(eyeProducts);\n+\n+    return null//await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n   @Get('')\n"
                },
                {
                    "date": 1708236565285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n-\n+debugger\n     return null//await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n"
                },
                {
                    "date": 1708236582500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     //const authorizationHeader = request.headers.authorization;\n     //const token = this.authService.getAuthorizationHeader(request);\n   \n     const eyeProducts = mapToEyeProducts(payloadArray);\n-debugger\n+console.log(eyeProducts)\n     return null//await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n"
                },
                {
                    "date": 1708237792720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,13 @@\n } from '@nestjs/common';\n import { EyeProduct } from './EyeProduct.entity';\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n-import { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\n+import {\n+  EyeProductParams,\n+  EyeProductResponse,\n+  mapToEyeProducts,\n+} from './EyeProduct.dto';\n import { TokenService } from 'src/token/token.service';\n \n // import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n // import { AuthService } from 'src/AuthService';\n@@ -21,28 +25,19 @@\n \n @Controller('eye')\n export class EyeController {\n   constructor(\n-   // private authService: AuthService,\n-   private readonly tokenService: TokenService,\n-    private readonly eyeService: EyeService\n-    \n-    ) {}\n+    // private authService: AuthService,\n+    private readonly tokenService: TokenService,\n+    private readonly eyeService: EyeService,\n+  ) {}\n \n-\n-\n-\n   @Post('submitItems')\n-\n   async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    console.log(token)\n-    //const authorizationHeader = request.headers.authorization;\n-    //const token = this.authService.getAuthorizationHeader(request);\n-  \n     const eyeProducts = mapToEyeProducts(payloadArray);\n-console.log(eyeProducts)\n-    return null//await this.eyeService.saveEyeProduct(eyeProducts);\n+    console.log(eyeProducts);\n+    return null; //await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n   @Get('')\n"
                },
                {
                    "date": 1708237818677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n   @Post('submitItems')\n   async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    const eyeProducts = mapToEyeProducts(payloadArray);\n+    const eyeProducts = mapToEyeProducts(payloadArray,12);\n     console.log(eyeProducts);\n     return null; //await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n"
                },
                {
                    "date": 1708240167817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     const eyeProducts = mapToEyeProducts(payloadArray,12);\n     console.log(eyeProducts);\n-    return null; //await this.eyeService.saveEyeProduct(eyeProducts);\n+    return await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n   @Get('')\n"
                },
                {
                    "date": 1708240930618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n   @Post('submitItems')\n   async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    const eyeProducts = mapToEyeProducts(payloadArray,12);\n+    const eyeProducts = mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n     console.log(eyeProducts);\n     return await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n"
                },
                {
                    "date": 1708243104006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,11 @@\n     private readonly tokenService: TokenService,\n     private readonly eyeService: EyeService,\n   ) {}\n \n+\n+\n+  \n   @Post('submitItems')\n   async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     const eyeProducts = mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n"
                },
                {
                    "date": 1708334993131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,15 @@\n   ) {}\n \n \n \n-  \n+\n   @Post('submitItems')\n-  async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n+  async create(@Body() payloadArray: any): Promise<boolean> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     const eyeProducts = mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n     console.log(eyeProducts);\n-    return await this.eyeService.saveEyeProduct(eyeProducts);\n+    return true;// await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n   @Get('')\n"
                },
                {
                    "date": 1708335320445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,15 @@\n   ) {}\n \n \n \n-\n+  \n   @Post('submitItems')\n-  async create(@Body() payloadArray: any): Promise<boolean> {\n+  async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     const eyeProducts = mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n     console.log(eyeProducts);\n-    return true;// await this.eyeService.saveEyeProduct(eyeProducts);\n+    return await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n   @Get('')\n"
                },
                {
                    "date": 1708335901954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,12 @@\n     const eyeProducts = mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n     console.log(eyeProducts);\n     return await this.eyeService.saveEyeProduct(eyeProducts);\n   }\n+  // saveMultipleItems(@Body() payloadArray: SaveEyeProductDto[]): Observable<EyeProduct[]> {\n+  //   const eyeProducts = mapToEyeProducts(payloadArray);\n+  //   return new Observable((observer) => observer.next(eyeProducts));\n+  // }\n \n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n   @Get('')\n   @ApiQuery({ name: 'productId', type: Number, required: false })\n"
                },
                {
                    "date": 1708337562976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { EyeProduct } from './EyeProduct.entity';\n import { EyeService } from './eye.service';\n import { ApiQuery } from '@nestjs/swagger';\n import {\n+  EyeProductDTO,\n   EyeProductParams,\n   EyeProductResponse,\n   mapToEyeProducts,\n } from './EyeProduct.dto';\n@@ -34,13 +35,12 @@\n \n \n   \n   @Post('submitItems')\n-  async create(@Body() payloadArray: any): Promise<EyeProduct[]> {\n+  async create(@Body() payloadArray: any): Promise<EyeProductDTO[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    const eyeProducts = mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n-    console.log(eyeProducts);\n-    return await this.eyeService.saveEyeProduct(eyeProducts);\n+    // await this.eyeService.saveEyeProduct(eyeProducts);\n+     return mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n   }\n   // saveMultipleItems(@Body() payloadArray: SaveEyeProductDto[]): Observable<EyeProduct[]> {\n   //   const eyeProducts = mapToEyeProducts(payloadArray);\n   //   return new Observable((observer) => observer.next(eyeProducts));\n"
                },
                {
                    "date": 1708337791102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n   \n   @Post('submitItems')\n   async create(@Body() payloadArray: any): Promise<EyeProductDTO[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-    // await this.eyeService.saveEyeProduct(eyeProducts);\n-     return mapToEyeProducts(payloadArray,token.userId,token.pipelinesIds);\n+     await this.eyeService.saveEyeProduct(eyeProducts);\n+     return mapToEyeProductsDTO(payloadArray,token.userId,token.pipelinesIds);\n   }\n   // saveMultipleItems(@Body() payloadArray: SaveEyeProductDto[]): Observable<EyeProduct[]> {\n   //   const eyeProducts = mapToEyeProducts(payloadArray);\n   //   return new Observable((observer) => observer.next(eyeProducts));\n"
                },
                {
                    "date": 1708337872002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n   EyeProductDTO,\n   EyeProductParams,\n   EyeProductResponse,\n   mapToEyeProducts,\n+  mapToEyeProductsDTO,\n } from './EyeProduct.dto';\n import { TokenService } from 'src/token/token.service';\n \n // import { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\n@@ -31,16 +32,18 @@\n     private readonly tokenService: TokenService,\n     private readonly eyeService: EyeService,\n   ) {}\n \n-\n-\n-  \n   @Post('submitItems')\n   async create(@Body() payloadArray: any): Promise<EyeProductDTO[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n-     await this.eyeService.saveEyeProduct(eyeProducts);\n-     return mapToEyeProductsDTO(payloadArray,token.userId,token.pipelinesIds);\n+    const eyeProducts = mapToEyeProducts(\n+      payloadArray,\n+      token.userId,\n+      token.pipelinesIds,\n+    );\n+    await this.eyeService.saveEyeProduct(eyeProducts);\n+    return mapToEyeProductsDTO(eyeProducts, token.userId, token.pipelinesIds);\n   }\n   // saveMultipleItems(@Body() payloadArray: SaveEyeProductDto[]): Observable<EyeProduct[]> {\n   //   const eyeProducts = mapToEyeProducts(payloadArray);\n   //   return new Observable((observer) => observer.next(eyeProducts));\n"
                },
                {
                    "date": 1708347027712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n   Controller,\n   Delete,\n   Get,\n   NotFoundException,\n+  Param,\n   Post,\n   Query,\n   Req,\n   UseInterceptors,\n@@ -70,15 +71,14 @@\n     const [eyeProducts, count] = await this.eyeService.getEyeProduct(params);\n     return { eyeProducts, count };\n   }\n   //http://localhost:3222/eye/?page=1&length=10&productId=123\n-  @Delete('')\n+  @Delete('/:productId')\n   async delete(\n-    @Query() params: EyeProductParams,\n+    @Param('productId') productId: number,\n   ): Promise<{ success: boolean }> {\n-    params.page = 1;\n-    params.length = 1;\n-    const [eyeProducts, count] = await this.eyeService.getEyeProduct(params);\n+    const searchParams = { page: 1, length: 1 } as EyeProductParams;\n+    const [eyeProducts, count] = await this.eyeService.getEyeProduct(searchParams);\n \n     if (count > 0) {\n       const res = await this.eyeService.delete(eyeProducts[0].productId);\n       return res;\n"
                },
                {
                    "date": 1709704351212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     private readonly tokenService: TokenService,\n     private readonly eyeService: EyeService,\n   ) {}\n \n-  @Post('submitItems')\n+  @Post('submitProducts')\n   async create(@Body() payloadArray: any): Promise<EyeProductDTO[]> {\n     const token = this.tokenService.getToken(); // Retrieve from service\n     const eyeProducts = mapToEyeProducts(\n       payloadArray,\n"
                }
            ],
            "date": 1708231573922,
            "name": "Commit-0",
            "content": "import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  NotFoundException,\n  Post,\n  Query,\n  Req,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { EyeProduct } from './EyeProduct.entity';\nimport { EyeService } from './eye.service';\nimport { ApiQuery } from '@nestjs/swagger';\nimport { EyeProductParams, EyeProductResponse, mapToEyeProducts } from './EyeProduct.dto';\nimport { HttpServiceAuthInterceptor } from 'src/AuthInterceptor';\nimport { AuthService } from 'src/AuthService';\nimport { Request } from 'express';\n\n@Controller('eye')\nexport class EyeController {\n  constructor(\n   // private authService: AuthService,\n    private readonly eyeService: EyeService) {}\n\n\n\n  //   http://localhost:3222/eye/EyeProduct\n  //   {\n  //     \"userId\": 1,\n  //     \"productId\": 123,\n  //     \"productTile\":\"کرم کلینیک\",\n  //     \"info\": \"Sample info\",\n  //     \"pipelinesIds\": \"1,2,3\"\n  //   }\n\n\n\n// Assuming you have defined appropriate types and decorators for your classes\n\n\n  @Post('submitItems')\n  @UseInterceptors(HttpServiceAuthInterceptor)\n  async create(@Body() payloadArray: any, @Req() request: Request): Promise<EyeProduct[]> {\n   // const authorizationHeader = request.headers.authorization;\n    //const token = this.authService.getAuthorizationHeader(request);\n  \n    const eyeProducts = mapToEyeProducts(payloadArray);\n    return await this.eyeService.saveEyeProduct(eyeProducts);\n  }\n\n  //http://localhost:3222/eye/?page=1&length=10&productId=123\n  @Get('')\n  @ApiQuery({ name: 'productId', type: Number, required: false })\n  @ApiQuery({ name: 'productTitle', type: String, required: false })\n  @ApiQuery({ name: 'createdAt', type: Date, required: false })\n  @ApiQuery({ name: 'page', type: Number, required: true })\n  @ApiQuery({ name: 'length', type: Number, required: true })\n  @ApiQuery({ name: 'sortColumn', type: String, required: false })\n  @ApiQuery({ name: 'sortType', type: String, required: false })\n  async get(@Query() eye: EyeProductParams): Promise<EyeProductResponse> {\n    const params: EyeProductParams = {\n      productId: eye.productId,\n      productTitle: eye.productTitle,\n      createdAt: eye.createdAt,\n      page: eye.page,\n      length: eye.length,\n    };\n    console.log(params + 'ali');\n    const [eyeProducts, count] = await this.eyeService.getEyeProduct(params);\n    return { eyeProducts, count };\n  }\n  //http://localhost:3222/eye/?page=1&length=10&productId=123\n  @Delete('')\n  async delete(\n    @Query() params: EyeProductParams,\n  ): Promise<{ success: boolean }> {\n    params.page = 1;\n    params.length = 1;\n    const [eyeProducts, count] = await this.eyeService.getEyeProduct(params);\n\n    if (count > 0) {\n      const res = await this.eyeService.delete(eyeProducts[0].productId);\n      return res;\n    } else {\n      throw new NotFoundException('No record found');\n    }\n  }\n}\n"
        }
    ]
}