{
    "sourceFile": "src/hamechidun/proccessing/hamechidun.process.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1706088244822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706091352068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n       };\r\n     }, R.values(groupedData));\r\n     return result;\r\n   };\r\n-  public OrdersGroupingByCategories23 = (data) => {\r\n+  public IncrediblesWithSameProducts = (data) => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles ID'))(data);\r\n     const result = R.map(\r\n       (val) => R.pluck('Products Selling Price', val),\r\n       groupedData,\r\n"
                },
                {
                    "date": 1706091706242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,14 @@\n       };\r\n     }, R.values(groupedData));\r\n     return result;\r\n   };\r\n-  public IncrediblesWithSameProducts = (data) => {\r\n+  public IncrediblesWithSameProducts = (data: any[]): IncrediblesType[] => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles ID'))(data);\r\n     const result = R.map(\r\n       (val) => R.pluck('Products Selling Price', val),\r\n       groupedData,\r\n     );\r\n-    return { result };\r\n+    return result;\r\n   };\r\n }\r\n+}\r\n"
                },
                {
                    "date": 1706092050141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n       };\r\n     }, R.values(groupedData));\r\n     return result;\r\n   };\r\n-  public IncrediblesWithSameProducts = (data: any[]): IncrediblesType[] => {\r\n+  public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles ID'))(data);\r\n     const result = R.map(\r\n       (val) => R.pluck('Products Selling Price', val),\r\n       groupedData,\r\n"
                },
                {
                    "date": 1706092490226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,6 +38,6 @@\n       groupedData,\r\n     );\r\n     return result;\r\n   };\r\n+\r\n }\r\n-}\r\n"
                },
                {
                    "date": 1706092735220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n     }, R.values(groupedData));\r\n     return result;\r\n   };\r\n   public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-    const groupedData = R.groupBy(R.prop('Incredibles ID'))(data);\r\n+    const groupedData = R.groupBy(R.prop('Incredibles_ID'))(data);\r\n     const result = R.map(\r\n-      (val) => R.pluck('Products Selling Price', val),\r\n+      (val) => R.pluck('Products_Selling_Price', val),\r\n       groupedData,\r\n     );\r\n     return result;\r\n   };\r\n"
                },
                {
                    "date": 1706093151093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,14 +30,26 @@\n       };\r\n     }, R.values(groupedData));\r\n     return result;\r\n   };\r\n-  public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-    const groupedData = R.groupBy(R.prop('Incredibles_ID'))(data);\r\n-    const result = R.map(\r\n-      (val) => R.pluck('Products_Selling_Price', val),\r\n-      groupedData,\r\n-    );\r\n-    return result;\r\n+  // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n+  //   const groupedData = R.groupBy(R.prop('Incredibles_ID'))(data);\r\n+  //   const result = R.map(\r\n+  //     (val) => R.pluck('Products_Selling_Price', val),\r\n+  //     groupedData,\r\n+  //   );\r\n+  //   return result;\r\n+  // };\r\n+  \r\n+\r\n+  const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n+    const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+  \r\n+    const result = R.mapObjIndexed((val, key) => ({\r\n+      increPrice: parseInt(key),\r\n+      prices: R.map((v) => ({ value: v.Products_Selling_Price }), val),\r\n+    }))(groupedData);\r\n+  \r\n+    return R.values(result);\r\n   };\r\n \r\n }\r\n"
                },
                {
                    "date": 1706093197695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,10 @@\n   //   return result;\r\n   // };\r\n   \r\n \r\n-  const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n+  //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n+    public IncrediblesWithSameProducts = (data: any[]): IIncrediblesPrice[] => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n   \r\n     const result = R.mapObjIndexed((val, key) => ({\r\n       increPrice: parseInt(key),\r\n"
                },
                {
                    "date": 1706095472411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,19 +38,17 @@\n   //     groupedData,\r\n   //   );\r\n   //   return result;\r\n   // };\r\n-  \r\n \r\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n-    public IncrediblesWithSameProducts = (data: any[]): IIncrediblesPrice[] => {\r\n+  public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n-  \r\n+\r\n     const result = R.mapObjIndexed((val, key) => ({\r\n       increPrice: parseInt(key),\r\n       prices: R.map((v) => ({ value: v.Products_Selling_Price }), val),\r\n     }))(groupedData);\r\n-  \r\n+\r\n     return R.values(result);\r\n   };\r\n-\r\n }\r\n"
                },
                {
                    "date": 1706095649062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,16 @@\n   //   return result;\r\n   // };\r\n \r\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n+\r\n+  private mapToProductDetails = (data: any[]): IProductsDetails => ({\r\n+    Products_Selling_Price: data.Products_Selling_Price,\r\n+    Products_discount_percent: data.Products_discount_percent,\r\n+    Products_seller_title: data.Products_seller_title,\r\n+    Products_seller_id: data.Products_seller_id,\r\n+  });\r\n+  \r\n   public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n \r\n     const result = R.mapObjIndexed((val, key) => ({\r\n"
                },
                {
                    "date": 1706095672118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,12 +51,15 @@\n   \r\n   public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n     const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n \r\n-    const result = R.mapObjIndexed((val, key) => ({\r\n-      increPrice: parseInt(key),\r\n-      prices: R.map((v) => ({ value: v.Products_Selling_Price }), val),\r\n-    }))(groupedData);\r\n+  const result = R.mapObjIndexed((val, key) => ({\r\n+    Incredible: {\r\n+      Incredibles_ID: parseInt(key),\r\n+      Incredibles_Selling_Price: val[0].Incredibles_Selling_Price,\r\n+    },\r\n+    Product_Details: R.map(this.mapToProductDetails, val),\r\n+  }))(groupedData);\r\n \r\n-    return R.values(result);\r\n-  };\r\n+  return R.values(result);\r\n+};\r\n }\r\n"
                },
                {
                    "date": 1706095999978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,26 +40,46 @@\n   //   return result;\r\n   // };\r\n \r\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n+    public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n+      // group the data by the Incredibles_ID column\r\n+      const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+    \r\n+      // map over the grouped data and create the IIncrediblesWithProducts objects\r\n+      const result = R.mapObjIndexed((val, key) => ({\r\n+        // create the Incredible object by picking the relevant properties from the first element of the group\r\n+        Incredible: R.pick(\r\n+          ['Incredibles_ID', 'Incredibles_Selling_Price'],\r\n+          R.head(val),\r\n+        ) as IIncredibleInfo,\r\n+        // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n+        Product_Details: R.map(\r\n+          (v) =>\r\n+            R.pick(\r\n+              [\r\n+                'Products_Selling_Price',\r\n+                'Products_discount_percent',\r\n+                'Products_seller_title',\r\n+                'Products_seller_id',\r\n+              ],\r\n+              v,\r\n+            ) as IProductsDetails,\r\n+          val,\r\n+        ),\r\n+      }))(groupedData);\r\n+    \r\n+      // return the values of the result object as an array\r\n+      return R.values(result);\r\n+    };\r\n+    \r\n+  // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n+  //   const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n \r\n-  private mapToProductDetails = (data: any[]): IProductsDetails => ({\r\n-    Products_Selling_Price: data.Products_Selling_Price,\r\n-    Products_discount_percent: data.Products_discount_percent,\r\n-    Products_seller_title: data.Products_seller_title,\r\n-    Products_seller_id: data.Products_seller_id,\r\n-  });\r\n-  \r\n-  public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-    const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+  //   const result = R.mapObjIndexed((val, key) => ({\r\n+  //     increPrice: parseInt(key),\r\n+  //     prices: R.map((v) => ({ Product_Details: v.Products_Selling_Price }), val),\r\n+  //   }))(groupedData);\r\n \r\n-  const result = R.mapObjIndexed((val, key) => ({\r\n-    Incredible: {\r\n-      Incredibles_ID: parseInt(key),\r\n-      Incredibles_Selling_Price: val[0].Incredibles_Selling_Price,\r\n-    },\r\n-    Product_Details: R.map(this.mapToProductDetails, val),\r\n-  }))(groupedData);\r\n-\r\n-  return R.values(result);\r\n-};\r\n+  //   return R.values(result);\r\n+  // };\r\n }\r\n"
                },
                {
                    "date": 1706096391080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       // map over the grouped data and create the IIncrediblesWithProducts objects\r\n       const result = R.mapObjIndexed((val, key) => ({\r\n         // create the Incredible object by picking the relevant properties from the first element of the group\r\n         Incredible: R.pick(\r\n-          ['Incredibles_ID', 'Incredibles_Selling_Price'],\r\n+          ['Incredibles_ID', 'Incredibles_Selling_Price', '',''],\r\n           R.head(val),\r\n         ) as IIncredibleInfo,\r\n         // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n         Product_Details: R.map(\r\n"
                },
                {
                    "date": 1706096442809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n       // map over the grouped data and create the IIncrediblesWithProducts objects\r\n       const result = R.mapObjIndexed((val, key) => ({\r\n         // create the Incredible object by picking the relevant properties from the first element of the group\r\n         Incredible: R.pick(\r\n-          ['Incredibles_ID', 'Incredibles_Selling_Price', '',''],\r\n+          ['Incredibles_ID', 'Incredibles_Selling_Price', 'Incredibles_Seller_Title',''],\r\n           R.head(val),\r\n         ) as IIncredibleInfo,\r\n         // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n         Product_Details: R.map(\r\n"
                },
                {
                    "date": 1706096447904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+// orders-grouping.provider.ts\r\n+import { Injectable } from '@nestjs/common';\r\n+const R = require('ramda');\r\n+\r\n+@Injectable()\r\n+export class ProcessingService {\r\n+  public OrdersGroupingByCategories23 = (\r\n+    data,\r\n+    categoryField,\r\n+    is_item_category3,\r\n+  ) => {\r\n+    const groupedData = R.groupBy(R.prop(categoryField), data);\r\n+    const result = R.map((group) => {\r\n+      const categoryTitle = R.head(group)[categoryField];\r\n+      const parentCategory = is_item_category3\r\n+        ? R.head(group)['item_category2']\r\n+        : null;\r\n+      return {\r\n+        category: {\r\n+          name: categoryField,\r\n+          title: categoryTitle,\r\n+          parent: parentCategory,\r\n+          count: R.sum(R.pluck('count', group)),\r\n+          max_price: R.apply(Math.max, R.pluck('max_price', group)),\r\n+          avg_price: Math.round(R.mean(R.pluck('avg_price', group))),\r\n+          total_price: R.sum(R.pluck('total_price', group)),\r\n+          avg_discount: Math.round(R.mean(R.pluck('avg_discount', group))),\r\n+          childs: [],\r\n+        },\r\n+      };\r\n+    }, R.values(groupedData));\r\n+    return result;\r\n+  };\r\n+  // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n+  //   const groupedData = R.groupBy(R.prop('Incredibles_ID'))(data);\r\n+  //   const result = R.map(\r\n+  //     (val) => R.pluck('Products_Selling_Price', val),\r\n+  //     groupedData,\r\n+  //   );\r\n+  //   return result;\r\n+  // };\r\n+\r\n+  //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n+    public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n+      // group the data by the Incredibles_ID column\r\n+      const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+    \r\n+      // map over the grouped data and create the IIncrediblesWithProducts objects\r\n+      const result = R.mapObjIndexed((val, key) => ({\r\n+        // create the Incredible object by picking the relevant properties from the first element of the group\r\n+        Incredible: R.pick(\r\n+          ['Incredibles_ID', 'Incredibles_Selling_Price', 'Incredibles_Seller_Title','Incredibles_Seller_Id'],\r\n+          R.head(val),\r\n+        ) as IIncredibleInfo,\r\n+        // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n+        Product_Details: R.map(\r\n+          (v) =>\r\n+            R.pick(\r\n+              [\r\n+                'Products_Selling_Price',\r\n+                'Products_discount_percent',\r\n+                'Products_seller_title',\r\n+                'Products_seller_id',\r\n+              ],\r\n+              v,\r\n+            ) as IProductsDetails,\r\n+          val,\r\n+        ),\r\n+      }))(groupedData);\r\n+    \r\n+      // return the values of the result object as an array\r\n+      return R.values(result);\r\n+    };\r\n+    \r\n+  // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n+  //   const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+\r\n+  //   const result = R.mapObjIndexed((val, key) => ({\r\n+  //     increPrice: parseInt(key),\r\n+  //     prices: R.map((v) => ({ Product_Details: v.Products_Selling_Price }), val),\r\n+  //   }))(groupedData);\r\n+\r\n+  //   return R.values(result);\r\n+  // };\r\n+}\r\n"
                },
                {
                    "date": 1706096766118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,124 +40,49 @@\n   //   return result;\r\n   // };\r\n \r\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n-    public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-      // group the data by the Incredibles_ID column\r\n-      const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n-    \r\n-      // map over the grouped data and create the IIncrediblesWithProducts objects\r\n-      const result = R.mapObjIndexed((val, key) => ({\r\n-        // create the Incredible object by picking the relevant properties from the first element of the group\r\n-        Incredible: R.pick(\r\n-          ['Incredibles_ID', 'Incredibles_Selling_Price', 'Incredibles_Seller_Title','Incredibles_Seller_Id'],\r\n-          R.head(val),\r\n-        ) as IIncredibleInfo,\r\n-        // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n-        Product_Details: R.map(\r\n-          (v) =>\r\n-            R.pick(\r\n-              [\r\n-                'Products_Selling_Price',\r\n-                'Products_discount_percent',\r\n-                'Products_seller_title',\r\n-                'Products_seller_id',\r\n-              ],\r\n-              v,\r\n-            ) as IProductsDetails,\r\n-          val,\r\n-        ),\r\n-      }))(groupedData);\r\n-    \r\n-      // return the values of the result object as an array\r\n-      return R.values(result);\r\n-    };\r\n-    \r\n-  // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-  //   const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+  public IncrediblesWithSameProducts = (\r\n+    data: any[],\r\n+  ): IIncrediblesWithProducts[] => {\r\n+    // group the data by the Incredibles_ID column\r\n+    const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n \r\n-  //   const result = R.mapObjIndexed((val, key) => ({\r\n-  //     increPrice: parseInt(key),\r\n-  //     prices: R.map((v) => ({ Product_Details: v.Products_Selling_Price }), val),\r\n-  //   }))(groupedData);\r\n+    // map over the grouped data and create the IIncrediblesWithProducts objects\r\n+    const result = R.mapObjIndexed((val, key) => ({\r\n+      // create the Incredible object by picking the relevant properties from the first element of the group\r\n+      Incredible: R.pick(\r\n+        [\r\n+          'inc_id',\r\n+          'inc_min_price_in_last_month',\r\n+          'inc_seller_price',\r\n+          'inc_discount_percent',\r\n+          'inc_rrp_price',\r\n+          'inc_seller_title',\r\n+          'inc_seller_id',\r\n+        ],\r\n+        R.head(val),\r\n+      ) as IIncredibleInfo,\r\n+      // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n+      Product_Details: R.map(\r\n+        (v) =>\r\n+          R.pick(\r\n+            [\r\n+              'Products_Selling_Price',\r\n+              'Products_discount_percent',\r\n+              'Products_seller_title',\r\n+              'Products_seller_id',\r\n+            ],\r\n+            v,\r\n+          ) as IProductsDetails,\r\n+        val,\r\n+      ),\r\n+    }))(groupedData);\r\n \r\n-  //   return R.values(result);\r\n-  // };\r\n-}\r\n-// orders-grouping.provider.ts\r\n-import { Injectable } from '@nestjs/common';\r\n-const R = require('ramda');\r\n-\r\n-@Injectable()\r\n-export class ProcessingService {\r\n-  public OrdersGroupingByCategories23 = (\r\n-    data,\r\n-    categoryField,\r\n-    is_item_category3,\r\n-  ) => {\r\n-    const groupedData = R.groupBy(R.prop(categoryField), data);\r\n-    const result = R.map((group) => {\r\n-      const categoryTitle = R.head(group)[categoryField];\r\n-      const parentCategory = is_item_category3\r\n-        ? R.head(group)['item_category2']\r\n-        : null;\r\n-      return {\r\n-        category: {\r\n-          name: categoryField,\r\n-          title: categoryTitle,\r\n-          parent: parentCategory,\r\n-          count: R.sum(R.pluck('count', group)),\r\n-          max_price: R.apply(Math.max, R.pluck('max_price', group)),\r\n-          avg_price: Math.round(R.mean(R.pluck('avg_price', group))),\r\n-          total_price: R.sum(R.pluck('total_price', group)),\r\n-          avg_discount: Math.round(R.mean(R.pluck('avg_discount', group))),\r\n-          childs: [],\r\n-        },\r\n-      };\r\n-    }, R.values(groupedData));\r\n-    return result;\r\n+    // return the values of the result object as an array\r\n+    return R.values(result);\r\n   };\r\n-  // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-  //   const groupedData = R.groupBy(R.prop('Incredibles_ID'))(data);\r\n-  //   const result = R.map(\r\n-  //     (val) => R.pluck('Products_Selling_Price', val),\r\n-  //     groupedData,\r\n-  //   );\r\n-  //   return result;\r\n-  // };\r\n \r\n-  //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n-    public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n-      // group the data by the Incredibles_ID column\r\n-      const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n-    \r\n-      // map over the grouped data and create the IIncrediblesWithProducts objects\r\n-      const result = R.mapObjIndexed((val, key) => ({\r\n-        // create the Incredible object by picking the relevant properties from the first element of the group\r\n-        Incredible: R.pick(\r\n-          ['Incredibles_ID', 'Incredibles_Selling_Price', 'Incredibles_Seller_Title',''],\r\n-          R.head(val),\r\n-        ) as IIncredibleInfo,\r\n-        // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n-        Product_Details: R.map(\r\n-          (v) =>\r\n-            R.pick(\r\n-              [\r\n-                'Products_Selling_Price',\r\n-                'Products_discount_percent',\r\n-                'Products_seller_title',\r\n-                'Products_seller_id',\r\n-              ],\r\n-              v,\r\n-            ) as IProductsDetails,\r\n-          val,\r\n-        ),\r\n-      }))(groupedData);\r\n-    \r\n-      // return the values of the result object as an array\r\n-      return R.values(result);\r\n-    };\r\n-    \r\n   // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n   //   const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n \r\n   //   const result = R.mapObjIndexed((val, key) => ({\r\n"
                },
                {
                    "date": 1706096838696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n       Incredible: R.pick(\r\n         [\r\n           'inc_id',\r\n           'inc_min_price_in_last_month',\r\n-          'inc_seller_price',\r\n+          'inc_selling_price',\r\n           'inc_discount_percent',\r\n           'inc_rrp_price',\r\n           'inc_seller_title',\r\n           'inc_seller_id',\r\n@@ -66,12 +66,13 @@\n       Product_Details: R.map(\r\n         (v) =>\r\n           R.pick(\r\n             [\r\n-              'Products_Selling_Price',\r\n-              'Products_discount_percent',\r\n-              'Products_seller_title',\r\n-              'Products_seller_id',\r\n+              'Product_Selling_Price',\r\n+              'Product_discount_percent',\r\n+              'Product_inc_rrp_price',\r\n+              'Product_seller_title',\r\n+              'Product_seller_id',\r\n             ],\r\n             v,\r\n           ) as IProductsDetails,\r\n         val,\r\n"
                },
                {
                    "date": 1706099577457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n       Product_Details: R.map(\r\n         (v) =>\r\n           R.pick(\r\n             [\r\n-              'Product_Selling_Price',\r\n+              'product_selling_price',\r\n               'Product_discount_percent',\r\n               'Product_inc_rrp_price',\r\n               'Product_seller_title',\r\n               'Product_seller_id',\r\n"
                },
                {
                    "date": 1706100116321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   public IncrediblesWithSameProducts = (\r\n     data: any[],\r\n   ): IIncrediblesWithProducts[] => {\r\n     // group the data by the Incredibles_ID column\r\n-    const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n+    const groupedData = R.groupBy(R.prop('inc_id'), data);\r\n \r\n     // map over the grouped data and create the IIncrediblesWithProducts objects\r\n     const result = R.mapObjIndexed((val, key) => ({\r\n       // create the Incredible object by picking the relevant properties from the first element of the group\r\n"
                },
                {
                    "date": 1706100224535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   public IncrediblesWithSameProducts = (\r\n     data: any[],\r\n   ): IIncrediblesWithProducts[] => {\r\n     // group the data by the Incredibles_ID column\r\n+    console.log(data)\r\n     const groupedData = R.groupBy(R.prop('inc_id'), data);\r\n \r\n     // map over the grouped data and create the IIncrediblesWithProducts objects\r\n     const result = R.mapObjIndexed((val, key) => ({\r\n"
                },
                {
                    "date": 1706101349169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     data: any[],\r\n   ): IIncrediblesWithProducts[] => {\r\n     // group the data by the Incredibles_ID column\r\n     console.log(data)\r\n-    const groupedData = R.groupBy(R.prop('inc_id'), data);\r\n+    const groupedData = R.groupBy(R.prop('id'), data);\r\n \r\n     // map over the grouped data and create the IIncrediblesWithProducts objects\r\n     const result = R.mapObjIndexed((val, key) => ({\r\n       // create the Incredible object by picking the relevant properties from the first element of the group\r\n"
                },
                {
                    "date": 1706101412559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,13 +67,13 @@\n       Product_Details: R.map(\r\n         (v) =>\r\n           R.pick(\r\n             [\r\n-              'product_selling_price',\r\n-              'Product_discount_percent',\r\n-              'Product_inc_rrp_price',\r\n-              'Product_seller_title',\r\n-              'Product_seller_id',\r\n+              'selling_price',\r\n+              'discount_percent',\r\n+              'inc_rrp_price',\r\n+              'seller_title',\r\n+              'seller_id',\r\n             ],\r\n             v,\r\n           ) as IProductsDetails,\r\n         val,\r\n@@ -88,9 +88,9 @@\n   //   const groupedData = R.groupBy(R.prop('Incredibles_ID'), data);\r\n \r\n   //   const result = R.mapObjIndexed((val, key) => ({\r\n   //     increPrice: parseInt(key),\r\n-  //     prices: R.map((v) => ({ Product_Details: v.Products_Selling_Price }), val),\r\n+  //     prices: R.map((v) => ({ Details: v.Products_Selling_Price }), val),\r\n   //   }))(groupedData);\r\n \r\n   //   return R.values(result);\r\n   // };\r\n"
                },
                {
                    "date": 1706102294277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,24 +43,20 @@\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n   public IncrediblesWithSameProducts = (\r\n     data: any[],\r\n   ): IIncrediblesWithProducts[] => {\r\n-    // group the data by the Incredibles_ID column\r\n-    console.log(data)\r\n+\r\n     const groupedData = R.groupBy(R.prop('id'), data);\r\n \r\n-    // map over the grouped data and create the IIncrediblesWithProducts objects\r\n-    const result = R.mapObjIndexed((val, key) => ({\r\n-      // create the Incredible object by picking the relevant properties from the first element of the group\r\n       Incredible: R.pick(\r\n         [\r\n-          'inc_id',\r\n-          'inc_min_price_in_last_month',\r\n-          'inc_selling_price',\r\n-          'inc_discount_percent',\r\n-          'inc_rrp_price',\r\n-          'inc_seller_title',\r\n-          'inc_seller_id',\r\n+          'id',\r\n+          'min_price_in_last_month',\r\n+          'selling_price',\r\n+          'discount_percent',\r\n+          'rrp_price',\r\n+          'seller_title',\r\n+          'seller_id',\r\n         ],\r\n         R.head(val),\r\n       ) as IIncredibleInfo,\r\n       // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n"
                },
                {
                    "date": 1706102307381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \r\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n   public IncrediblesWithSameProducts = (\r\n     data: any[],\r\n-  ): IIncrediblesWithProducts[] => {\r\n+  ): any[] => {\r\n \r\n     const groupedData = R.groupBy(R.prop('id'), data);\r\n \r\n       Incredible: R.pick(\r\n"
                },
                {
                    "date": 1706102358063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,13 @@\n \r\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n   public IncrediblesWithSameProducts = (\r\n     data: any[],\r\n-  ): any[] => {\r\n-\r\n+  ): IIncrediblesWithProducts[] => {\r\n+ \r\n     const groupedData = R.groupBy(R.prop('id'), data);\r\n-\r\n+    const result = R.mapObjIndexed((val, key) => ({\r\n+      // create the Incredible object by picking the relevant properties from the first element of the group\r\n       Incredible: R.pick(\r\n         [\r\n           'id',\r\n           'min_price_in_last_month',\r\n@@ -65,9 +66,9 @@\n           R.pick(\r\n             [\r\n               'selling_price',\r\n               'discount_percent',\r\n-              'inc_rrp_price',\r\n+              'rrp_price',\r\n               'seller_title',\r\n               'seller_id',\r\n             ],\r\n             v,\r\n"
                },
                {
                    "date": 1706102517834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n       Product_Details: R.map(\r\n         (v) =>\r\n           R.pick(\r\n             [\r\n-              'selling_price',\r\n+              'product_selling_price',\r\n               'discount_percent',\r\n               'rrp_price',\r\n               'seller_title',\r\n               'seller_id',\r\n"
                },
                {
                    "date": 1706102533553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         (v) =>\r\n           R.pick(\r\n             [\r\n               'product_selling_price',\r\n-              'discount_percent',\r\n+              'Product_discount_percent',\r\n               'rrp_price',\r\n               'seller_title',\r\n               'seller_id',\r\n             ],\r\n"
                },
                {
                    "date": 1706102541847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n           R.pick(\r\n             [\r\n               'product_selling_price',\r\n               'Product_discount_percent',\r\n-              'rrp_price',\r\n+              'product_rrp_price',\r\n               'seller_title',\r\n               'seller_id',\r\n             ],\r\n             v,\r\n"
                },
                {
                    "date": 1706102555099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n         (v) =>\r\n           R.pick(\r\n             [\r\n               'product_selling_price',\r\n-              'Product_discount_percent',\r\n+              'product_discount_percent',\r\n               'product_rrp_price',\r\n               'seller_title',\r\n               'seller_id',\r\n             ],\r\n"
                },
                {
                    "date": 1706102572757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,10 +67,10 @@\n             [\r\n               'product_selling_price',\r\n               'product_discount_percent',\r\n               'product_rrp_price',\r\n-              'seller_title',\r\n-              'seller_id',\r\n+              'product_seller_id',\r\n+              'product_seller_id',\r\n             ],\r\n             v,\r\n           ) as IProductsDetails,\r\n         val,\r\n"
                },
                {
                    "date": 1706102865558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,10 @@\n   //const transformData = (data: any[]): IIncrediblesPrice[] => {\r\n   public IncrediblesWithSameProducts = (\r\n     data: any[],\r\n   ): IIncrediblesWithProducts[] => {\r\n- \r\n     const groupedData = R.groupBy(R.prop('id'), data);\r\n     const result = R.mapObjIndexed((val, key) => ({\r\n-      // create the Incredible object by picking the relevant properties from the first element of the group\r\n       Incredible: R.pick(\r\n         [\r\n           'id',\r\n           'min_price_in_last_month',\r\n@@ -59,9 +57,8 @@\n           'seller_id',\r\n         ],\r\n         R.head(val),\r\n       ) as IIncredibleInfo,\r\n-      // create the Product_Details array by mapping over the group and picking the relevant properties from each element\r\n       Product_Details: R.map(\r\n         (v) =>\r\n           R.pick(\r\n             [\r\n@@ -75,10 +72,8 @@\n           ) as IProductsDetails,\r\n         val,\r\n       ),\r\n     }))(groupedData);\r\n-\r\n-    // return the values of the result object as an array\r\n     return R.values(result);\r\n   };\r\n \r\n   // public IncrediblesWithSameProducts = (data: any[]): IIncrediblesWithProducts[] => {\r\n"
                }
            ],
            "date": 1706088244822,
            "name": "Commit-0",
            "content": "// orders-grouping.provider.ts\r\nimport { Injectable } from '@nestjs/common';\r\nconst R = require('ramda');\r\n\r\n@Injectable()\r\nexport class ProcessingService {\r\n  public OrdersGroupingByCategories23 = (\r\n    data,\r\n    categoryField,\r\n    is_item_category3,\r\n  ) => {\r\n    const groupedData = R.groupBy(R.prop(categoryField), data);\r\n    const result = R.map((group) => {\r\n      const categoryTitle = R.head(group)[categoryField];\r\n      const parentCategory = is_item_category3\r\n        ? R.head(group)['item_category2']\r\n        : null;\r\n      return {\r\n        category: {\r\n          name: categoryField,\r\n          title: categoryTitle,\r\n          parent: parentCategory,\r\n          count: R.sum(R.pluck('count', group)),\r\n          max_price: R.apply(Math.max, R.pluck('max_price', group)),\r\n          avg_price: Math.round(R.mean(R.pluck('avg_price', group))),\r\n          total_price: R.sum(R.pluck('total_price', group)),\r\n          avg_discount: Math.round(R.mean(R.pluck('avg_discount', group))),\r\n          childs: [],\r\n        },\r\n      };\r\n    }, R.values(groupedData));\r\n    return result;\r\n  };\r\n  public OrdersGroupingByCategories23 = (data) => {\r\n    const groupedData = R.groupBy(R.prop('Incredibles ID'))(data);\r\n    const result = R.map(\r\n      (val) => R.pluck('Products Selling Price', val),\r\n      groupedData,\r\n    );\r\n    return { result };\r\n  };\r\n}\r\n"
        }
    ]
}