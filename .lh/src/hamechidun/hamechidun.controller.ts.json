{
    "sourceFile": "src/hamechidun/hamechidun.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 114,
            "patches": [
                {
                    "date": 1704529483035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1704529532452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \n import { Controller, Get } from '@nestjs/common';\n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n-import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary } from './entity/entityAll';\n+import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary, populateOrdersProductsCategoriesInfo } from './entity/entityAll';\n \n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService) {}\n"
                },
                {
                    "date": 1704530734507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,12 @@\n    @Get('populate_order_product_price_expensive')\n   async get_populate_order_product_price_expensive(): Promise<PopulateOrderProductPriceExpensive[]> {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n-    @Get('populate_orders_products_categories_info')\n-  async get_populate_orders_products_categories_info(): Promise<populateOrdersProductsCategoriesInfo[]> {\n-    return this.hamechidunService.get_populate_orders_products_categories_info();\n+  @Get('populate_orders_products_categories_info')\n+  async get_populate_orders_products_categories_info(@Req() req: Request): Promise<populateOrdersProductsCategoriesInfo[]> {\n+    const itemCategory2 = req.headers.get().itemCategory2 || null;\n+    const itemCategory3 = req.query.itemCategory3 || null;\n+    return this.hamechidunService.get_populate_orders_products_categories_info(itemCategory2, itemCategory3);\n   }\n }\n \n"
                },
                {
                    "date": 1704530753462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n-import { Controller, Get } from '@nestjs/common';\n+import { Controller, Get, Query } from '@nestjs/common';\n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary, populateOrdersProductsCategoriesInfo } from './entity/entityAll';\n \n@@ -30,11 +30,15 @@\n   async get_populate_order_product_price_expensive(): Promise<PopulateOrderProductPriceExpensive[]> {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n-  async get_populate_orders_products_categories_info(@Req() req: Request): Promise<populateOrdersProductsCategoriesInfo[]> {\n-    const itemCategory2 = req.headers.get().itemCategory2 || null;\n-    const itemCategory3 = req.query.itemCategory3 || null;\n-    return this.hamechidunService.get_populate_orders_products_categories_info(itemCategory2, itemCategory3);\n+  async get_populate_orders_products_categories_info(\n+    @Query('item_category2') item_category2: string,\n+    @Query('item_category3') item_category3: string\n+  ): Promise<populateOrdersProductsCategoriesInfo[]> {\n+    return this.hamechidunService.get_populate_orders_products_categories_info(\n+      item_category2,\n+      item_category3\n+    );\n   }\n }\n \n"
                },
                {
                    "date": 1704530949074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n \n-import { Controller, Get, Query } from '@nestjs/common';\n+import { Controller, Get, Logger, Query } from '@nestjs/common';\n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary, populateOrdersProductsCategoriesInfo } from './entity/entityAll';\n \n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService) {}\n+  private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n   async getTopSellingProducts(): Promise<TopSellingProduct[]> {\n     return this.hamechidunService.get_topSellingProducts();\n"
                },
                {
                    "date": 1704530993715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n   async get_populate_orders_products_categories_info(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n+    this.logger.log(' item_category2 is: ' + item_category2 +'3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       item_category2,\n       item_category3\n     );\n"
                },
                {
                    "date": 1704531162313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,10 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n   async get_populate_orders_products_categories_info(\n-    @Query('item_category2') item_category2: string,\n-    @Query('item_category3') item_category3: string\n+    @Query('item_category2') item_category2: string | null,\n+    @Query('item_category3') item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log(' item_category2 is: ' + item_category2 +'3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       item_category2,\n"
                },
                {
                    "date": 1704541797087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   async get_populate_orders_products_categories_info(\n     @Query('item_category2') item_category2: string | null,\n     @Query('item_category3') item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n-    this.logger.log(' item_category2 is: ' + item_category2 +'3 is: '+item_category3);\n+    this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +'item_category3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       item_category2,\n       item_category3\n     );\n"
                },
                {
                    "date": 1704542205935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n   async get_populate_orders_products_categories_info(\n     @Query('item_category2') item_category2: string | null,\n     @Query('item_category3') item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n-    this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +'item_category3 is: '+item_category3);\n+    this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       item_category2,\n       item_category3\n     );\n"
                },
                {
                    "date": 1704545377939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n \n import { Controller, Get, Logger, Query } from '@nestjs/common';\n+import { Transform } from 'class-transformer';\n+\n+\n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary, populateOrdersProductsCategoriesInfo } from './entity/entityAll';\n \n@@ -32,15 +35,14 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n   async get_populate_orders_products_categories_info(\n-    @Query('item_category2') item_category2: string | null,\n-    @Query('item_category3') item_category3: string | null,\n+    @Query('item_category2') @Transform(value => value === 'NULL' ? null : value) item_category2: string | null,\n+    @Query('item_category3') @Transform(value => value === 'NULL' ? null : value) item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       item_category2,\n       item_category3\n     );\n-  }\n }\n \n"
                },
                {
                    "date": 1704601313695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \n import { Controller, Get, Logger, Query } from '@nestjs/common';\n-import { Transform } from 'class-transformer';\n+import { IsOptional } from 'class-validator';\n \n \n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n@@ -35,14 +35,15 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n   async get_populate_orders_products_categories_info(\n-    @Query('item_category2') @Transform(value => value === 'NULL' ? null : value) item_category2: string | null,\n-    @Query('item_category3') @Transform(value => value === 'NULL' ? null : value) item_category3: string | null,\n+    @Query('item_category2') @IsOptional(item_category2: string | null,\n+    @Query('item_category3') @Optional() item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       item_category2,\n       item_category3\n     );\n+  }\n }\n \n"
                },
                {
                    "date": 1704601371685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,15 +35,15 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n   async get_populate_orders_products_categories_info(\n-    @Query('item_category2') @IsOptional(item_category2: string | null,\n+    @Query('item_category2') @IsOptional item_category2: string | null,\n     @Query('item_category3') @Optional() item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n-      item_category2,\n-      item_category3\n+      'NULL',\n+      'تنقلات'\n     );\n   }\n }\n \n"
                },
                {
                    "date": 1704601376926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,10 +35,10 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n   async get_populate_orders_products_categories_info(\n-    @Query('item_category2') @IsOptional item_category2: string | null,\n-    @Query('item_category3') @Optional() item_category3: string | null,\n+    // @Query('item_category2') @IsOptional item_category2: string | null,\n+    // @Query('item_category3') @Optional() item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       'NULL',\n"
                },
                {
                    "date": 1704601387295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n   async get_populate_orders_products_categories_info(\n     // @Query('item_category2') @IsOptional item_category2: string | null,\n     // @Query('item_category3') @Optional() item_category3: string | null,\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n-    this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n+    this.logger.log('CONTROLLER item_category2 is: ' + 'item_category2' +' ,item_category3 is: '+'item_category3');\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       'NULL',\n       'تنقلات'\n     );\n"
                },
                {
                    "date": 1704601451514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log('CONTROLLER item_category2 is: ' + 'item_category2' +' ,item_category3 is: '+'item_category3');\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       'NULL',\n-      'تنقلات'\n+      'NULL'\n     );\n   }\n }\n \n"
                },
                {
                    "date": 1704601527707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   ): Promise<populateOrdersProductsCategoriesInfo[]> {\n     this.logger.log('CONTROLLER item_category2 is: ' + 'item_category2' +' ,item_category3 is: '+'item_category3');\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       'NULL',\n-      'NULL'\n+      'تنقلات'\n     );\n   }\n }\n \n"
                },
                {
                    "date": 1704617859208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,7 +43,16 @@\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       'NULL',\n       'تنقلات'\n     );\n+    \n   }\n+\n+  @Get('x2')\n+  getOrdersInfo(\n+    @Query('item_category2') itemCategory2: string | null,\n+    @Query('item_category3') itemCategory3: string | null,\n+  ) {\n+    return this.hamechidunService.get_populate_orders_products_categories_info2(itemCategory2, itemCategory3);\n+  }\n }\n \n"
                },
                {
                    "date": 1704618143292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n-import { Controller, Get, Logger, Query } from '@nestjs/common';\n+import { Controller, Get, Logger, Param, Query } from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n \n \n import { HamechidunService } from './hamechidun.service';\n@@ -53,6 +53,15 @@\n     @Query('item_category3') itemCategory3: string | null,\n   ) {\n     return this.hamechidunService.get_populate_orders_products_categories_info2(itemCategory2, itemCategory3);\n   }\n+   @Get('x3')\n+   async getData(\n+     //@Param('id') id: string,\n+     @Query('param1') param1: string,\n+     @Query('param2') param2: string,\n+   ) {\n+     // if param1 or param2 is null, pass null to the service\n+     return this.hamechidunService.get_populate_orders_products_categories_info3(id, param1 ?? null, param2 ?? null);\n+   }\n }\n \n"
                },
                {
                    "date": 1704618187787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,8 @@\n      @Query('param1') param1: string,\n      @Query('param2') param2: string,\n    ) {\n      // if param1 or param2 is null, pass null to the service\n-     return this.hamechidunService.get_populate_orders_products_categories_info3(id, param1 ?? null, param2 ?? null);\n+     return this.hamechidunService.get_populate_orders_products_categories_info3( param1 ?? null, param2 ?? null);\n    }\n }\n \n"
                },
                {
                    "date": 1704618394505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,17 +49,17 @@\n \n   @Get('x2')\n   getOrdersInfo(\n     @Query('item_category2') itemCategory2: string | null,\n-    @Query('item_category3') itemCategory3: string | null,\n+    @Query('item_category2') itemCategory3: string | null,\n   ) {\n     return this.hamechidunService.get_populate_orders_products_categories_info2(itemCategory2, itemCategory3);\n   }\n    @Get('x3')\n    async getData(\n      //@Param('id') id: string,\n-     @Query('param1') param1: string,\n-     @Query('param2') param2: string,\n+     @Query('item_category2') param1: string,\n+     @Query('item_category2') param2: string,\n    ) {\n      // if param1 or param2 is null, pass null to the service\n      return this.hamechidunService.get_populate_orders_products_categories_info3( param1 ?? null, param2 ?? null);\n    }\n"
                },
                {
                    "date": 1704618453106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n    @Get('x3')\n    async getData(\n      //@Param('id') id: string,\n      @Query('item_category2') param1: string,\n-     @Query('item_category2') param2: string,\n+     @Query('item_category3') param2: string,\n    ) {\n      // if param1 or param2 is null, pass null to the service\n      return this.hamechidunService.get_populate_orders_products_categories_info3( param1 ?? null, param2 ?? null);\n    }\n"
                },
                {
                    "date": 1704619059098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,11 @@\n      //@Param('id') id: string,\n      @Query('item_category2') param1: string,\n      @Query('item_category3') param2: string,\n    ) {\n+      // assign null if the value is falsy\n+  itemCategory2 = itemCategory2 || null;\n+  itemCategory3 = itemCategory3 || null;\n      // if param1 or param2 is null, pass null to the service\n      return this.hamechidunService.get_populate_orders_products_categories_info3( param1 ?? null, param2 ?? null);\n    }\n }\n"
                },
                {
                    "date": 1704619070403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,10 @@\n   }\n    @Get('x3')\n    async getData(\n      //@Param('id') id: string,\n-     @Query('item_category2') param1: string,\n-     @Query('item_category3') param2: string,\n+     @Query('item_category2') item_category2: string,\n+     @Query('item_category3') item_category3: string,\n    ) {\n       // assign null if the value is falsy\n   itemCategory2 = itemCategory2 || null;\n   itemCategory3 = itemCategory3 || null;\n"
                },
                {
                    "date": 1704619114617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,11 @@\n      @Query('item_category2') item_category2: string,\n      @Query('item_category3') item_category3: string,\n    ) {\n       // assign null if the value is falsy\n-  itemCategory2 = itemCategory2 || null;\n-  itemCategory3 = itemCategory3 || null;\n+      item_category2 = item_category2 || null;\n+      item_category2 = item_category3 || null;\n      // if param1 or param2 is null, pass null to the service\n-     return this.hamechidunService.get_populate_orders_products_categories_info3( param1 ?? null, param2 ?? null);\n+     return this.hamechidunService.get_populate_orders_products_categories_info3( item_category2 ?? null, item_category3 ?? null);\n    }\n }\n \n"
                },
                {
                    "date": 1704619519209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n    ) {\n       // assign null if the value is falsy\n       item_category2 = item_category2 || null;\n       item_category2 = item_category3 || null;\n+      this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n      // if param1 or param2 is null, pass null to the service\n      return this.hamechidunService.get_populate_orders_products_categories_info3( item_category2 ?? null, item_category3 ?? null);\n    }\n }\n"
                },
                {
                    "date": 1704619561641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n      @Query('item_category3') item_category3: string,\n    ) {\n       // assign null if the value is falsy\n       item_category2 = item_category2 || null;\n-      item_category2 = item_category3 || null;\n+      item_category3 = item_category3 || null;\n       this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n      // if param1 or param2 is null, pass null to the service\n      return this.hamechidunService.get_populate_orders_products_categories_info3( item_category2 ?? null, item_category3 ?? null);\n    }\n"
                },
                {
                    "date": 1704620181490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \n import { Controller, Get, Logger, Param, Query } from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n+const R = require('ramda');\n \n-\n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary, populateOrdersProductsCategoriesInfo } from './entity/entityAll';\n \n@@ -59,13 +59,62 @@\n      //@Param('id') id: string,\n      @Query('item_category2') item_category2: string,\n      @Query('item_category3') item_category3: string,\n    ) {\n-      // assign null if the value is falsy\n-      item_category2 = item_category2 || null;\n-      item_category3 = item_category3 || null;\n+\n       this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n      // if param1 or param2 is null, pass null to the service\n+\n+\n+\n+\n+// Sample data\n+const data = [\n+  {\n+    \"item_category2\": \"Electronics\",\n+    \"item_category3\": \"Laptops\",\n+    \"count\": 1,\n+    \"max_price\": 549900,\n+    \"avg_price\": 549900,\n+    \"total_price\": 549900,\n+    \"avg_discount\": 45.00\n+  },\n+  {\n+    \"item_category2\": \"Electronics\",\n+    \"item_category3\": \"mobile\",\n+    \"count\": 1,\n+    \"max_price\": 1599000,\n+    \"avg_price\": 1599000,\n+    \"total_price\": 1599000,\n+    \"avg_discount\": 15.00\n+  },\n+  {\n+    \"item_category2\": \"Electronics\",\n+    \"item_category3\": \"mobile\",\n+    \"count\": 1,\n+    \"max_price\": 291000,\n+    \"avg_price\": 291000,\n+    \"total_price\": 291000,\n+    \"avg_discount\": 18.00\n+  }\n+];\n+\n+// Group the data by item_category2\n+const groupedData = R.groupBy(R.prop('item_category2'), data);\n+\n+// Calculate and show corresponding values\n+const result = R.mapObjIndexed((group) => {\n+  return {\n+    count: R.sum(R.pluck('count', group)),\n+    max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+    avg_price: R.mean(R.pluck('avg_price', group)),\n+    total_price: R.sum(R.pluck('total_price', group)),\n+    avg_discount: R.mean(R.pluck('avg_discount', group))\n+  };\n+}, groupedData);\n+\n+console.log(result);\n+\n      return this.hamechidunService.get_populate_orders_products_categories_info3( item_category2 ?? null, item_category3 ?? null);\n    }\n }\n \n"
                },
                {
                    "date": 1704620511126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,17 @@\n-\n import { Controller, Get, Logger, Param, Query } from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n const R = require('ramda');\n \n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n-import { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary, populateOrdersProductsCategoriesInfo } from './entity/entityAll';\n+import {\n+  PopulateOrderProductPriceExpensive,\n+  PopulateOrdersProductsMost,\n+  PopulateOrdersSellersMost,\n+  PopulateOrdersSummary,\n+  populateOrdersProductsCategoriesInfo,\n+} from './entity/entityAll';\n \n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService) {}\n@@ -16,105 +21,81 @@\n   async getTopSellingProducts(): Promise<TopSellingProduct[]> {\n     return this.hamechidunService.get_topSellingProducts();\n   }\n \n-   @Get('populate_orders_summary')\n+  @Get('populate_orders_summary')\n   async get_populate_orders_summery(): Promise<PopulateOrdersSummary> {\n     return this.hamechidunService.get_populate_orders_summery();\n-  } \n-   @Get('populate_orders_sellers_most')\n-  async get_populate_orders_sellers_most(): Promise<PopulateOrdersSellersMost[]> {\n+  }\n+  @Get('populate_orders_sellers_most')\n+  async get_populate_orders_sellers_most(): Promise<\n+    PopulateOrdersSellersMost[]\n+  > {\n     return this.hamechidunService.get_populate_orders_sellers_most();\n-  } \n- \n+  }\n+\n   @Get('populate_orders_products_most')\n-  async get_populate_orders_products_most(): Promise<PopulateOrdersProductsMost[]> {\n+  async get_populate_orders_products_most(): Promise<\n+    PopulateOrdersProductsMost[]\n+  > {\n     return this.hamechidunService.get_populate_orders_products_most();\n   }\n-   @Get('populate_order_product_price_expensive')\n-  async get_populate_order_product_price_expensive(): Promise<PopulateOrderProductPriceExpensive[]> {\n+  @Get('populate_order_product_price_expensive')\n+  async get_populate_order_product_price_expensive(): Promise<\n+    PopulateOrderProductPriceExpensive[]\n+  > {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n-  async get_populate_orders_products_categories_info(\n-    // @Query('item_category2') @IsOptional item_category2: string | null,\n-    // @Query('item_category3') @Optional() item_category3: string | null,\n-  ): Promise<populateOrdersProductsCategoriesInfo[]> {\n-    this.logger.log('CONTROLLER item_category2 is: ' + 'item_category2' +' ,item_category3 is: '+'item_category3');\n+  async get_populate_orders_products_categories_info() // @Query('item_category2') @IsOptional item_category2: string | null,\n+  // @Query('item_category3') @Optional() item_category3: string | null,\n+  : Promise<populateOrdersProductsCategoriesInfo[]> {\n+    this.logger.log(\n+      'CONTROLLER item_category2 is: ' +\n+        'item_category2' +\n+        ' ,item_category3 is: ' +\n+        'item_category3',\n+    );\n     return this.hamechidunService.get_populate_orders_products_categories_info(\n       'NULL',\n-      'تنقلات'\n+      'تنقلات',\n     );\n-    \n   }\n \n   @Get('x2')\n   getOrdersInfo(\n     @Query('item_category2') itemCategory2: string | null,\n     @Query('item_category2') itemCategory3: string | null,\n   ) {\n-    return this.hamechidunService.get_populate_orders_products_categories_info2(itemCategory2, itemCategory3);\n+    return this.hamechidunService.get_populate_orders_products_categories_info2(\n+      itemCategory2,\n+      itemCategory3,\n+    );\n   }\n-   @Get('x3')\n-   async getData(\n-     //@Param('id') id: string,\n-     @Query('item_category2') item_category2: string,\n-     @Query('item_category3') item_category3: string,\n-   ) {\n+  @Get('x3')\n+  async getData(\n+    @Query('item_category2') item_category2: string,\n+    @Query('item_category3') item_category3: string,\n+  ) {\n+    await data=  this.hamechidunService.get_populate_orders_products_categories_info3(\n+      item_category2 ?? null,\n+      item_category3 ?? null,\n+    );\n+    // Group the data by item_category2\n+    const groupedData = R.groupBy(R.prop('item_category2'), data);\n \n-      this.logger.log('CONTROLLER item_category2 is: ' + item_category2 +' ,item_category3 is: '+item_category3);\n-     // if param1 or param2 is null, pass null to the service\n+    // Calculate and show corresponding values\n+    const result = R.mapObjIndexed((group) => {\n+      return {\n+        count: R.sum(R.pluck('count', group)),\n+        max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+        avg_price: R.mean(R.pluck('avg_price', group)),\n+        total_price: R.sum(R.pluck('total_price', group)),\n+        avg_discount: R.mean(R.pluck('avg_discount', group)),\n+      };\n+    }, groupedData);\n \n+    console.log(result);\n \n-\n-\n-// Sample data\n-const data = [\n-  {\n-    \"item_category2\": \"Electronics\",\n-    \"item_category3\": \"Laptops\",\n-    \"count\": 1,\n-    \"max_price\": 549900,\n-    \"avg_price\": 549900,\n-    \"total_price\": 549900,\n-    \"avg_discount\": 45.00\n-  },\n-  {\n-    \"item_category2\": \"Electronics\",\n-    \"item_category3\": \"mobile\",\n-    \"count\": 1,\n-    \"max_price\": 1599000,\n-    \"avg_price\": 1599000,\n-    \"total_price\": 1599000,\n-    \"avg_discount\": 15.00\n-  },\n-  {\n-    \"item_category2\": \"Electronics\",\n-    \"item_category3\": \"mobile\",\n-    \"count\": 1,\n-    \"max_price\": 291000,\n-    \"avg_price\": 291000,\n-    \"total_price\": 291000,\n-    \"avg_discount\": 18.00\n+  \n   }\n-];\n-\n-// Group the data by item_category2\n-const groupedData = R.groupBy(R.prop('item_category2'), data);\n-\n-// Calculate and show corresponding values\n-const result = R.mapObjIndexed((group) => {\n-  return {\n-    count: R.sum(R.pluck('count', group)),\n-    max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-    avg_price: R.mean(R.pluck('avg_price', group)),\n-    total_price: R.sum(R.pluck('total_price', group)),\n-    avg_discount: R.mean(R.pluck('avg_discount', group))\n-  };\n-}, groupedData);\n-\n-console.log(result);\n-\n-     return this.hamechidunService.get_populate_orders_products_categories_info3( item_category2 ?? null, item_category3 ?? null);\n-   }\n }\n-\n"
                },
                {
                    "date": 1704620599402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,22 +80,27 @@\n       item_category2 ?? null,\n       item_category3 ?? null,\n     );\n     // Group the data by item_category2\n-    const groupedData = R.groupBy(R.prop('item_category2'), data);\n+    const result = orders_grouping(data);\n \n-    // Calculate and show corresponding values\n-    const result = R.mapObjIndexed((group) => {\n-      return {\n-        count: R.sum(R.pluck('count', group)),\n-        max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-        avg_price: R.mean(R.pluck('avg_price', group)),\n-        total_price: R.sum(R.pluck('total_price', group)),\n-        avg_discount: R.mean(R.pluck('avg_discount', group)),\n-      };\n-    }, groupedData);\n-\n     console.log(result);\n \n   \n+\n+    function orders_grouping(data) {\n+      const groupedData = R.groupBy(R.prop('item_category2'), );\n+\n+      // Calculate and show corresponding values\n+      const result = R.mapObjIndexed((group) => {\n+        return {\n+          count: R.sum(R.pluck('count', group)),\n+          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+          avg_price: R.mean(R.pluck('avg_price', group)),\n+          total_price: R.sum(R.pluck('total_price', group)),\n+          avg_discount: R.mean(R.pluck('avg_discount', group)),\n+        };\n+      }, groupedData);\n+      return result;\n+    }\n   }\n }\n"
                },
                {
                    "date": 1704620779743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n   ) {\n-    await data=  this.hamechidunService.get_populate_orders_products_categories_info3(\n+    const data= await  this.hamechidunService.get_populate_orders_products_categories_info3(\n       item_category2 ?? null,\n       item_category3 ?? null,\n     );\n     // Group the data by item_category2\n"
                },
                {
                    "date": 1704620845132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,21 +75,20 @@\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n   ) {\n-    const data= await  this.hamechidunService.get_populate_orders_products_categories_info3(\n-      item_category2 ?? null,\n-      item_category3 ?? null,\n-    );\n+    const data =\n+      await this.hamechidunService.get_populate_orders_products_categories_info3(\n+        item_category2 ?? null,\n+        item_category3 ?? null,\n+      );\n     // Group the data by item_category2\n     const result = orders_grouping(data);\n \n     console.log(result);\n \n-  \n-\n     function orders_grouping(data) {\n-      const groupedData = R.groupBy(R.prop('item_category2'), );\n+      const groupedData = R.groupBy(R.prop('item_category2'),data);\n \n       // Calculate and show corresponding values\n       const result = R.mapObjIndexed((group) => {\n         return {\n"
                },
                {
                    "date": 1704620891984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,8 +80,9 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info3(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n+      console.log(data)\n     // Group the data by item_category2\n     const result = orders_grouping(data);\n \n     console.log(result);\n"
                },
                {
                    "date": 1704620958743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     console.log(result);\n \n     function orders_grouping(data) {\n       const groupedData = R.groupBy(R.prop('item_category2'),data);\n-\n+  console.log(groupedData);\n       // Calculate and show corresponding values\n       const result = R.mapObjIndexed((group) => {\n         return {\n           count: R.sum(R.pluck('count', group)),\n"
                },
                {
                    "date": 1704621359451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,34 +45,8 @@\n   > {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n   @Get('populate_orders_products_categories_info')\n-  async get_populate_orders_products_categories_info() // @Query('item_category2') @IsOptional item_category2: string | null,\n-  // @Query('item_category3') @Optional() item_category3: string | null,\n-  : Promise<populateOrdersProductsCategoriesInfo[]> {\n-    this.logger.log(\n-      'CONTROLLER item_category2 is: ' +\n-        'item_category2' +\n-        ' ,item_category3 is: ' +\n-        'item_category3',\n-    );\n-    return this.hamechidunService.get_populate_orders_products_categories_info(\n-      'NULL',\n-      'تنقلات',\n-    );\n-  }\n-\n-  @Get('x2')\n-  getOrdersInfo(\n-    @Query('item_category2') itemCategory2: string | null,\n-    @Query('item_category2') itemCategory3: string | null,\n-  ) {\n-    return this.hamechidunService.get_populate_orders_products_categories_info2(\n-      itemCategory2,\n-      itemCategory3,\n-    );\n-  }\n-  @Get('x3')\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n   ) {\n"
                },
                {
                    "date": 1704621427954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n   ) {\n     const data =\n-      await this.hamechidunService.get_populate_orders_products_categories_info3(\n+      await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n       console.log(data)\n"
                },
                {
                    "date": 1704621682436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,24 @@\n     PopulateOrderProductPriceExpensive[]\n   > {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n+\n+  orders_grouping = (data) => {\n+    const groupedData = R.groupBy(R.prop('item_category2'), data);\n+    // Calculate and show corresponding values\n+    const result = R.mapObjIndexed((group) => {\n+      return {\n+        count: R.sum(R.pluck('count', group)),\n+        max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+        avg_price: R.mean(R.pluck('avg_price', group)),\n+        total_price: R.sum(R.pluck('total_price', group)),\n+        avg_discount: R.mean(R.pluck('avg_discount', group)),\n+      };\n+    }, groupedData);\n+    return result;\n+  };\n+\n   @Get('populate_orders_products_categories_info')\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n@@ -54,27 +70,11 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-      console.log(data)\n+    console.log(data);\n     // Group the data by item_category2\n-    const result = orders_grouping(data);\n+    const result = this.orders_grouping(data);\n \n     console.log(result);\n-\n-    function orders_grouping(data) {\n-      const groupedData = R.groupBy(R.prop('item_category2'),data);\n-  console.log(groupedData);\n-      // Calculate and show corresponding values\n-      const result = R.mapObjIndexed((group) => {\n-        return {\n-          count: R.sum(R.pluck('count', group)),\n-          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-          avg_price: R.mean(R.pluck('avg_price', group)),\n-          total_price: R.sum(R.pluck('total_price', group)),\n-          avg_discount: R.mean(R.pluck('avg_discount', group)),\n-        };\n-      }, groupedData);\n-      return result;\n-    }\n   }\n }\n"
                },
                {
                    "date": 1704621737714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,16 +65,14 @@\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n   ) {\n-    const data =\n+    const order_orderItems_grouping =\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    console.log(data);\n-    // Group the data by item_category2\n-    const result = this.orders_grouping(data);\n+    const orders_grouping = this.orders_grouping(order_orderItems_grouping);\n \n     console.log(result);\n   }\n }\n"
                },
                {
                    "date": 1704627543769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { Controller, Get, Logger, Param, Query } from '@nestjs/common';\n+import { Controller, Get, HttpCode, Logger, Param, Query, Res } from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n const R = require('ramda');\n \n import { HamechidunService } from './hamechidun.service';\n@@ -61,18 +61,25 @@\n     return result;\n   };\n \n   @Get('populate_orders_products_categories_info')\n+  @HttpCode(200) // specify the HTTP status code\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n+    @Res() res: Response, // inject the response object\n   ) {\n     const order_orderItems_grouping =\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n     const orders_grouping = this.orders_grouping(order_orderItems_grouping);\n \n-    console.log(result);\n+    // use the send method to return the response with two parts\n+    res.({\n+      order_item_grouping: order_orderItems_grouping,\n+      orders_grouping: orders_grouping,\n+    });\n   }\n }\n+}\n"
                },
                {
                    "date": 1704627720237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import { Controller, Get, HttpCode, Logger, Param, Query, Res } from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n+import { Request, Response } from 'express';\n const R = require('ramda');\n \n import { HamechidunService } from './hamechidun.service';\n import { TopSellingProduct } from './entity/TopSellingProduct';\n@@ -75,9 +76,9 @@\n       );\n     const orders_grouping = this.orders_grouping(order_orderItems_grouping);\n \n     // use the send method to return the response with two parts\n-    res.({\n+    res\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n"
                },
                {
                    "date": 1704627752656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       );\n     const orders_grouping = this.orders_grouping(order_orderItems_grouping);\n \n     // use the send method to return the response with two parts\n-    res\n+    res.\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n"
                },
                {
                    "date": 1704627767063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n       );\n     const orders_grouping = this.orders_grouping(order_orderItems_grouping);\n \n     // use the send method to return the response with two parts\n-    res.\n+    res.send({\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n"
                },
                {
                    "date": 1704627776541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,13 @@\n-import { Controller, Get, HttpCode, Logger, Param, Query, Res } from '@nestjs/common';\n+import {\n+  Controller,\n+  Get,\n+  HttpCode,\n+  Logger,\n+  Param,\n+  Query,\n+  Res,\n+} from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n import { Request, Response } from 'express';\n const R = require('ramda');\n \n@@ -82,5 +90,4 @@\n       orders_grouping: orders_grouping,\n     });\n   }\n }\n-}\n"
                },
                {
                    "date": 1704627816771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n     @Res() res: Response, // inject the response object\n-  ) {\n+  ) { \n     const order_orderItems_grouping =\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n"
                },
                {
                    "date": 1704627895711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n   Logger,\n   Param,\n   Query,\n   Res,\n+  UseFilters,\n } from '@nestjs/common';\n import { IsOptional } from 'class-validator';\n import { Request, Response } from 'express';\n const R = require('ramda');\n@@ -19,9 +20,11 @@\n   PopulateOrdersSellersMost,\n   PopulateOrdersSummary,\n   populateOrdersProductsCategoriesInfo,\n } from './entity/entityAll';\n+import { RedisExceptionFilter } from 'src/interceptors/RedisExceptionFilter';\n \n+@UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService) {}\n   private readonly logger = new Logger(HamechidunController.name);\n"
                },
                {
                    "date": 1704628772798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,16 @@\n   PopulateOrdersSummary,\n   populateOrdersProductsCategoriesInfo,\n } from './entity/entityAll';\n import { RedisExceptionFilter } from 'src/interceptors/RedisExceptionFilter';\n+import { OrderItem } from './entity/OrderItem';\n \n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n-  constructor(private readonly hamechidunService: HamechidunService) {}\n+  constructor(private readonly hamechidunService: HamechidunService,\n+    private readonly hamechidunService: OrderItemService\n+    ) {}\n   private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n   async getTopSellingProducts(): Promise<TopSellingProduct[]> {\n@@ -92,5 +95,13 @@\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n+\n+  @Get('orderItem')\n+\n+  async get_orderItems(): Promise<\n+    PopulateOrderProductPriceExpensive[]\n+  > {\n+    return this.hamechidunService.get_populate_order_product_price_expensive();\n+  }\n }\n"
                },
                {
                    "date": 1704628782548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,14 +22,15 @@\n   populateOrdersProductsCategoriesInfo,\n } from './entity/entityAll';\n import { RedisExceptionFilter } from 'src/interceptors/RedisExceptionFilter';\n import { OrderItem } from './entity/OrderItem';\n+import { OrderItemService } from './orderItems.service';\n \n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService,\n-    private readonly hamechidunService: OrderItemService\n+    private readonly OrderItemService: OrderItemService\n     ) {}\n   private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n"
                },
                {
                    "date": 1704628797773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService,\n-    private readonly OrderItemService: OrderItemService\n+    private readonly orderItemService: OrderItemService\n     ) {}\n   private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n@@ -102,7 +102,7 @@\n \n   async get_orderItems(): Promise<\n     PopulateOrderProductPriceExpensive[]\n   > {\n-    return this.hamechidunService.get_populate_order_product_price_expensive();\n+    return this.orderItemService.get_orderItems();\n   }\n }\n"
                },
                {
                    "date": 1704628814421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,10 +99,8 @@\n   }\n \n   @Get('orderItem')\n \n-  async get_orderItems(): Promise<\n-    PopulateOrderProductPriceExpensive[]\n-  > {\n+  async get_orderItems(): Promise<OrderItem[]> {\n     return this.orderItemService.get_orderItems();\n   }\n }\n"
                },
                {
                    "date": 1704629107365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService,\n-    private readonly orderItemService: OrderItemService\n+   // private readonly orderItemService: OrderItemService\n     ) {}\n   private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n@@ -98,9 +98,8 @@\n     });\n   }\n \n   @Get('orderItem')\n-\n   async get_orderItems(): Promise<OrderItem[]> {\n-    return this.orderItemService.get_orderItems();\n+    return null;// this.orderItemService.get_orderItems();\n   }\n }\n"
                },
                {
                    "date": 1704629454835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n   constructor(private readonly hamechidunService: HamechidunService,\n-   // private readonly orderItemService: OrderItemService\n+    private readonly orderItemService: OrderItemService\n     ) {}\n   private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n@@ -99,7 +99,7 @@\n   }\n \n   @Get('orderItem')\n   async get_orderItems(): Promise<OrderItem[]> {\n-    return null;// this.orderItemService.get_orderItems();\n+    return this.orderItemService.get_orderItems();\n   }\n }\n"
                },
                {
                    "date": 1704630263631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,8 @@\n     });\n   }\n \n   @Get('orderItem')\n-  async get_orderItems(): Promise<OrderItem[]> {\n+  async get_orderItems(): Promise<ObjectLiteral[]> {\n     return this.orderItemService.get_orderItems();\n   }\n }\n"
                },
                {
                    "date": 1704630519375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n } from './entity/entityAll';\n import { RedisExceptionFilter } from 'src/interceptors/RedisExceptionFilter';\n import { OrderItem } from './entity/OrderItem';\n import { OrderItemService } from './orderItems.service';\n+import { ObjectLiteral } from 'typeorm';\n \n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n@@ -98,8 +99,13 @@\n     });\n   }\n \n   @Get('orderItem')\n-  async get_orderItems(): Promise<ObjectLiteral[]> {\n-    return this.orderItemService.get_orderItems();\n+  async get_orderItems(\n+    @Query() query,\n+\n+  ): Promise<ObjectLiteral[]> {\n+      // get the query parameters from the query object\n+      const { item_category2, item_category3, product_status, seller_id } = query;\n+    return this.orderItemService.get_orderItems(item_category2, item_category3, product_status, seller_id);\n   }\n }\n"
                },
                {
                    "date": 1704630608934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,7 +105,7 @@\n \n   ): Promise<ObjectLiteral[]> {\n       // get the query parameters from the query object\n       const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(item_category2, item_category3, product_status, seller_id);\n+    return this.orderItemService.get_orderItems(item_category2);\n   }\n }\n"
                },
                {
                    "date": 1704692897822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n   @Get('orderItem')\n   async get_orderItems(\n     @Query() query,\n \n-  ): Promise<ObjectLiteral[]> {\n+  ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n       const { item_category2, item_category3, product_status, seller_id } = query;\n     return this.orderItemService.get_orderItems(item_category2);\n   }\n"
                },
                {
                    "date": 1704693884035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,7 +105,7 @@\n \n   ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n       const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(item_category2);\n+    return this.orderItemService.get_orderItems(2);\n   }\n }\n"
                },
                {
                    "date": 1704694828679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,7 +105,7 @@\n \n   ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n       const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(2);\n+    return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n   }\n }\n"
                },
                {
                    "date": 1704696200583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,7 +105,7 @@\n \n   ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n       const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n+    return this.orderItemService.get_orderItems(2,\"order_item_quantity\",\"DESC\");\n   }\n }\n"
                },
                {
                    "date": 1704696240818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,7 +105,7 @@\n \n   ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n       const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(2,\"order_item_quantity\",\"DESC\");\n+    return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n   }\n }\n"
                },
                {
                    "date": 1704697494569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,12 +100,13 @@\n   }\n \n   @Get('orderItem')\n   async get_orderItems(\n+    @Query('quantity') item_category2: string,\n     @Query() query,\n \n   ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n-      const { item_category2, item_category3, product_status, seller_id } = query;\n+      //const { item_category2, item_category3, product_status, seller_id } = query;\n     return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n   }\n }\n"
                },
                {
                    "date": 1704697839100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,13 @@\n   Param,\n   Query,\n   Res,\n   UseFilters,\n+  ValidationPipe\n } from '@nestjs/common';\n-import { IsOptional } from 'class-validator';\n+\n+\n+import { ApiQuery } from '@nestjs/swagger';\n import { Request, Response } from 'express';\n const R = require('ramda');\n \n import { HamechidunService } from './hamechidun.service';\n@@ -98,15 +101,31 @@\n       orders_grouping: orders_grouping,\n     });\n   }\n \n+\n+\n+  @Get()\n+  @ApiQuery({ name: 'name', required: false })\n+  @ApiQuery({ name: 'age', required: false })\n+  @ApiQuery({ name: 'sort', required: false })\n+  async getUsers(@Query(ValidationPipe) params: SearchParamsDto) {\n+    // Access the query parameters from the params object\n+    const { name, age, sort } = params;\n+\n+    // Use the query parameters to filter and sort the users\n+    const users = await this.usersService.getUsers(name, age, sort);\n+\n+    // Return the users as a response\n+    return users;\n+  }\n+\n   @Get('orderItem')\n   async get_orderItems(\n-    @Query('quantity') item_category2: string,\n     @Query() query,\n \n   ): Promise<OrderItem[]> {\n       // get the query parameters from the query object\n-      //const { item_category2, item_category3, product_status, seller_id } = query;\n+      const { item_category2, item_category3, product_status, seller_id } = query;\n     return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n   }\n }\n"
                },
                {
                    "date": 1704701442117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,18 +103,18 @@\n   }\n \n \n \n-  @Get()\n+  @Get(\"oi\")\n   @ApiQuery({ name: 'name', required: false })\n   @ApiQuery({ name: 'age', required: false })\n   @ApiQuery({ name: 'sort', required: false })\n   async getUsers(@Query(ValidationPipe) params: SearchParamsDto) {\n     // Access the query parameters from the params object\n     const { name, age, sort } = params;\n \n     // Use the query parameters to filter and sort the users\n-    const users = await this.usersService.getUsers(name, age, sort);\n+    return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n \n     // Return the users as a response\n     return users;\n   }\n"
                },
                {
                    "date": 1704701472511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n   @Get(\"oi\")\n   @ApiQuery({ name: 'name', required: false })\n   @ApiQuery({ name: 'age', required: false })\n   @ApiQuery({ name: 'sort', required: false })\n-  async getUsers(@Query(ValidationPipe) params: SearchParamsDto) {\n+  async getUsers(@Query(ValidationPipe) params: OrderItem) {\n     // Access the query parameters from the params object\n     const { name, age, sort } = params;\n \n     // Use the query parameters to filter and sort the users\n"
                },
                {
                    "date": 1704701479278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n import { RedisExceptionFilter } from 'src/interceptors/RedisExceptionFilter';\n import { OrderItem } from './entity/OrderItem';\n import { OrderItemService } from './orderItems.service';\n import { ObjectLiteral } from 'typeorm';\n+import { OrderItemDto } from './DTO/OrderItemDto';\n \n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n@@ -107,9 +108,9 @@\n   @Get(\"oi\")\n   @ApiQuery({ name: 'name', required: false })\n   @ApiQuery({ name: 'age', required: false })\n   @ApiQuery({ name: 'sort', required: false })\n-  async getUsers(@Query(ValidationPipe) params: OrderItem) {\n+  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { name, age, sort } = params;\n \n     // Use the query parameters to filter and sort the users\n"
                },
                {
                    "date": 1704701485608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,11 +114,8 @@\n     const { name, age, sort } = params;\n \n     // Use the query parameters to filter and sort the users\n     return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n-\n-    // Return the users as a response\n-    return users;\n   }\n \n   @Get('orderItem')\n   async get_orderItems(\n"
                },
                {
                    "date": 1704701645604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,16 +105,15 @@\n \n \n \n   @Get(\"oi\")\n-  @ApiQuery({ name: 'name', required: false })\n+  @ApiQuery({ name: 'quantity', required: false })\n   @ApiQuery({ name: 'age', required: false })\n   @ApiQuery({ name: 'sort', required: false })\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n-    const { name, age, sort } = params;\n+    const { quantity, age, sort } = params;\n \n-    // Use the query parameters to filter and sort the users\n     return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n   }\n \n   @Get('orderItem')\n"
                },
                {
                    "date": 1704701731262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n   @ApiQuery({ name: 'age', required: false })\n   @ApiQuery({ name: 'sort', required: false })\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n-    const { quantity, age, sort } = params;\n+    const { quantity, sortColumn, sortType } = params;\n \n     return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n   }\n \n"
                },
                {
                    "date": 1704701760661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, sortColumn, sortType } = params;\n \n-    return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n+    return this.orderItemService.get_orderItems(2,quantity, sortColumn, sortType);\n   }\n \n   @Get('orderItem')\n   async get_orderItems(\n"
                },
                {
                    "date": 1704701785362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, sortColumn, sortType } = params;\n \n-    return this.orderItemService.get_orderItems(2,quantity, sortColumn, sortType);\n+    return this.orderItemService.get_orderItems(quantity, sortColumn, sortType);\n   }\n \n   @Get('orderItem')\n   async get_orderItems(\n"
                },
                {
                    "date": 1704702210293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,11 @@\n   Param,\n   Query,\n   Res,\n   UseFilters,\n-  ValidationPipe\n+  ValidationPipe,\n } from '@nestjs/common';\n \n-\n import { ApiQuery } from '@nestjs/swagger';\n import { Request, Response } from 'express';\n const R = require('ramda');\n \n@@ -32,11 +31,12 @@\n \n @UseFilters(RedisExceptionFilter)\n @Controller('hamechidun')\n export class HamechidunController {\n-  constructor(private readonly hamechidunService: HamechidunService,\n-    private readonly orderItemService: OrderItemService\n-    ) {}\n+  constructor(\n+    private readonly hamechidunService: HamechidunService,\n+    private readonly orderItemService: OrderItemService,\n+  ) {}\n   private readonly logger = new Logger(HamechidunController.name);\n \n   @Get('top-selling')\n   async getTopSellingProducts(): Promise<TopSellingProduct[]> {\n@@ -87,9 +87,9 @@\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n     @Res() res: Response, // inject the response object\n-  ) { \n+  ) {\n     const order_orderItems_grouping =\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n@@ -102,27 +102,24 @@\n       orders_grouping: orders_grouping,\n     });\n   }\n \n-\n-\n-  @Get(\"oi\")\n+  @Get('oi')\n   @ApiQuery({ name: 'quantity', required: false })\n   @ApiQuery({ name: 'age', required: false })\n   @ApiQuery({ name: 'sort', required: false })\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, sortColumn, sortType } = params;\n-\n+    this.logger.log(\n+      'orderItem Get params: ' + quantity + sortColumn + sortType,\n+    );\n     return this.orderItemService.get_orderItems(quantity, sortColumn, sortType);\n   }\n \n   @Get('orderItem')\n-  async get_orderItems(\n-    @Query() query,\n-\n-  ): Promise<OrderItem[]> {\n-      // get the query parameters from the query object\n-      const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(2,\"quantity\",\"DESC\");\n+  async get_orderItems(@Query() query): Promise<OrderItem[]> {\n+    // get the query parameters from the query object\n+    const { item_category2, item_category3, product_status, seller_id } = query;\n+    return this.orderItemService.get_orderItems(2, 'quantity', 'DESC');\n   }\n }\n"
                },
                {
                    "date": 1704702328602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n   }\n \n   @Get('oi')\n   @ApiQuery({ name: 'quantity', required: false })\n-  @ApiQuery({ name: 'age', required: false })\n-  @ApiQuery({ name: 'sort', required: false })\n+  @ApiQuery({ name: 'sortColumn', required: false })\n+  @ApiQuery({ name: 'sortType', required: false })\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, sortColumn, sortType } = params;\n     this.logger.log(\n"
                },
                {
                    "date": 1704702414248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n   }\n \n   @Get('oi')\n   @ApiQuery({ name: 'quantity', required: false })\n-  @ApiQuery({ name: 'sortColumn', required: false })\n-  @ApiQuery({ name: 'sortType', required: false })\n+  @ApiQuery({ name: 'sortColumn', required: false }) // Change from age to sortColumn\n+  @ApiQuery({ name: 'sortType', required: false }) // \n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, sortColumn, sortType } = params;\n     this.logger.log(\n"
                },
                {
                    "date": 1704702602656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n   }\n \n   @Get('oi')\n   @ApiQuery({ name: 'quantity', required: false })\n-  @ApiQuery({ name: 'sortColumn', required: false }) // Change from age to sortColumn\n-  @ApiQuery({ name: 'sortType', required: false }) // \n+  @ApiQuery({ name: 'sortColumn', required: false }) \n+  @ApiQuery({ name: 'sortType', required: false }) \n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, sortColumn, sortType } = params;\n     this.logger.log(\n"
                },
                {
                    "date": 1704702824893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n     const { quantity, sortColumn, sortType } = params;\n     this.logger.log(\n       'orderItem Get params: ' + quantity + sortColumn + sortType,\n     );\n-    return this.orderItemService.get_orderItems(quantity, sortColumn, sortType);\n+    return this.orderItemService.get_orderItems(2, sortColumn, sortType);\n   }\n \n   @Get('orderItem')\n   async get_orderItems(@Query() query): Promise<OrderItem[]> {\n"
                },
                {
                    "date": 1704702891542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n     const { quantity, sortColumn, sortType } = params;\n     this.logger.log(\n       'orderItem Get params: ' + quantity + sortColumn + sortType,\n     );\n-    return this.orderItemService.get_orderItems(2, sortColumn, sortType);\n+    return this.orderItemService.get_orderItems(quantity, sortColumn, sortType);\n   }\n \n   @Get('orderItem')\n   async get_orderItems(@Query() query): Promise<OrderItem[]> {\n"
                },
                {
                    "date": 1704703638229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,22 +104,23 @@\n   }\n \n   @Get('oi')\n   @ApiQuery({ name: 'quantity', required: false })\n+  @ApiQuery({ name: 'product_title_fa', required: false })\n   @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n-    const { quantity, sortColumn, sortType } = params;\n+    const { quantity, product_title_fa,sortColumn, sortType } = params;\n     this.logger.log(\n       'orderItem Get params: ' + quantity + sortColumn + sortType,\n     );\n-    return this.orderItemService.get_orderItems(quantity, sortColumn, sortType);\n+    return this.orderItemService.get_orderItems(quantity,product_title_fa, sortColumn, sortType);\n   }\n \n-  @Get('orderItem')\n-  async get_orderItems(@Query() query): Promise<OrderItem[]> {\n-    // get the query parameters from the query object\n-    const { item_category2, item_category3, product_status, seller_id } = query;\n-    return this.orderItemService.get_orderItems(2, 'quantity', 'DESC');\n-  }\n+  // @Get('orderItem')\n+  // async get_orderItems(@Query() query): Promise<OrderItem[]> {\n+  //   // get the query parameters from the query object\n+  //   const { item_category2, item_category3, product_status, seller_id } = query;\n+  //   return this.orderItemService.get_orderItems(2, 'quantity', 'DESC');\n+  // }\n }\n"
                },
                {
                    "date": 1704703849144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n     const { quantity, product_title_fa,sortColumn, sortType } = params;\n     this.logger.log(\n       'orderItem Get params: ' + quantity + sortColumn + sortType,\n     );\n-    return this.orderItemService.get_orderItems(quantity,product_title_fa, sortColumn, sortType);\n+    return this.orderItemService.get_orderItems(product_title_fa,quantity, sortColumn, sortType);\n   }\n \n   // @Get('orderItem')\n   // async get_orderItems(@Query() query): Promise<OrderItem[]> {\n"
                },
                {
                    "date": 1704705333972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, product_title_fa,sortColumn, sortType } = params;\n     this.logger.log(\n-      'orderItem Get params: ' + quantity + sortColumn + sortType,\n+      'orderItem Get params: ' + product_title_fa,\n     );\n     return this.orderItemService.get_orderItems(product_title_fa,quantity, sortColumn, sortType);\n   }\n \n"
                },
                {
                    "date": 1704713178606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,23 +101,67 @@\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n-\n+    this.logger.log(\n+      'orderItem Get params: ' + quantity + sortColumn + sortType,\n+    );\n   @Get('oi')\n   @ApiQuery({ name: 'quantity', required: false })\n   @ApiQuery({ name: 'product_title_fa', required: false })\n   @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n   async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n     // Access the query parameters from the params object\n     const { quantity, product_title_fa,sortColumn, sortType } = params;\n-    this.logger.log(\n-      'orderItem Get params: ' + product_title_fa,\n-    );\n-    return this.orderItemService.get_orderItems(product_title_fa,quantity, sortColumn, sortType);\n+\n+    return this.orderItemService.get_orderItems(,product_title_faquantity, sortColumn, sortType);\n   }\n \n+  @Get('oi')\n+  @Query(ValidationPipe) params: OrderItemDto,\n+  @Query('product_title_fa') product_title_fa: string,\n+  @Query('quantity') quantity: number, // Add this line\n+  @Query('product_id') product_id: number, // Add this line\n+  @Query('title_fa') title_fa: string, // Add this line\n+  @Query('title_en') title_en: string, // Add this line\n+  @Query('brand') brand: string, // Add this line\n+  @Query('category') category: string, // Add this line\n+  @Query('item_category2') item_category2: string, // Add this line\n+  @Query('item_category3') item_category3: string, // Add this line\n+  @Query('rrp_price') rrp_price: number, // Add this line\n+  @Query('selling_price') selling_price: number, // Add this line\n+  @Query('discount_percent') discount_percent: number, // Add this line\n+  @Query('is_incredible') is_incredible: boolean, // Add this line\n+  @Query('is_promotion') is_promotion: boolean, // Add this line\n+  @Query('bnpl_active') bnpl_active: boolean, // Add this line\n+  @Query('seller_id') seller_id: number, // Add this line\n+  @Query('seller_title') seller_title: string, // Add this line\n+  @Query('seller_code') seller_code: string, // Add this line\n+ async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n+\n+      const { quantity, product_title_fa,sortColumn, sortType } = params;\n+  return this.orderItemService.get_orderItems(\n+    product_title_fa,\n+    quantity,\n+    product_id,\n+    title_fa,\n+    title_en,\n+    brand,\n+    category,\n+    item_category2,\n+    item_category3,\n+    rrp_price,\n+    selling_price,\n+    discount_percent,\n+    is_incredible,\n+    is_promotion,\n+    bnpl_active,\n+    seller_id,\n+    seller_title,\n+    seller_code\n+  );\n+ }\n   // @Get('orderItem')\n   // async get_orderItems(@Query() query): Promise<OrderItem[]> {\n   //   // get the query parameters from the query object\n   //   const { item_category2, item_category3, product_status, seller_id } = query;\n"
                },
                {
                    "date": 1704713273341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,25 +101,24 @@\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n-    this.logger.log(\n-      'orderItem Get params: ' + quantity + sortColumn + sortType,\n-    );\n-  @Get('oi')\n-  @ApiQuery({ name: 'quantity', required: false })\n-  @ApiQuery({ name: 'product_title_fa', required: false })\n-  @ApiQuery({ name: 'sortColumn', required: false }) \n-  @ApiQuery({ name: 'sortType', required: false }) \n-  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n-    // Access the query parameters from the params object\n-    const { quantity, product_title_fa,sortColumn, sortType } = params;\n+    // this.logger.log(\n+    //   'orderItem Get params: ' + quantity + sortColumn + sortType,\n+    // );\n+  // @Get('oi')\n+  // @ApiQuery({ name: 'quantity', required: false })\n+  // @ApiQuery({ name: 'product_title_fa', required: false })\n+  // @ApiQuery({ name: 'sortColumn', required: false }) \n+  // @ApiQuery({ name: 'sortType', required: false }) \n+  // async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-    return this.orderItemService.get_orderItems(,product_title_faquantity, sortColumn, sortType);\n-  }\n+  //   const { quantity, product_title_fa,sortColumn, sortType } = params;\n \n+  //   return this.orderItemService.get_orderItems(,product_title_faquantity, sortColumn, sortType);\n+  // }\n+\n   @Get('oi')\n-  @Query(ValidationPipe) params: OrderItemDto,\n   @Query('product_title_fa') product_title_fa: string,\n   @Query('quantity') quantity: number, // Add this line\n   @Query('product_id') product_id: number, // Add this line\n   @Query('title_fa') title_fa: string, // Add this line\n"
                },
                {
                    "date": 1704714123674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,29 +117,33 @@\n   //   return this.orderItemService.get_orderItems(,product_title_faquantity, sortColumn, sortType);\n   // }\n \n   @Get('oi')\n-  @Query('product_title_fa') product_title_fa: string,\n-  @Query('quantity') quantity: number, // Add this line\n-  @Query('product_id') product_id: number, // Add this line\n-  @Query('title_fa') title_fa: string, // Add this line\n-  @Query('title_en') title_en: string, // Add this line\n-  @Query('brand') brand: string, // Add this line\n-  @Query('category') category: string, // Add this line\n-  @Query('item_category2') item_category2: string, // Add this line\n-  @Query('item_category3') item_category3: string, // Add this line\n-  @Query('rrp_price') rrp_price: number, // Add this line\n-  @Query('selling_price') selling_price: number, // Add this line\n-  @Query('discount_percent') discount_percent: number, // Add this line\n-  @Query('is_incredible') is_incredible: boolean, // Add this line\n-  @Query('is_promotion') is_promotion: boolean, // Add this line\n-  @Query('bnpl_active') bnpl_active: boolean, // Add this line\n-  @Query('seller_id') seller_id: number, // Add this line\n-  @Query('seller_title') seller_title: string, // Add this line\n-  @Query('seller_code') seller_code: string, // Add this line\n+  @ApiQuery({ name: 'quantity', type: Number, required: false })\n+  @ApiQuery({ name: 'product_id', type: Number, required: false })\n+  @ApiQuery({ name: 'title_fa', type: String, required: false })\n+  @ApiQuery({ name: 'title_en', type: String, required: false })\n+  @ApiQuery({ name: 'brand', type: String, required: false })\n+  @ApiQuery({ name: 'category', type: String, required: false })\n+  @ApiQuery({ name: 'item_category2', type: String, required: false })\n+  @ApiQuery({ name: 'item_category3', type: String, required: false })\n+  @ApiQuery({ name: 'rrp_price', type: Number, required: false })\n+  @ApiQuery({ name: 'selling_price', type: Number, required: false })\n+  @ApiQuery({ name: 'discount_percent', type: Number, required: false })\n+  @ApiQuery({ name: 'is_incredible', type: Boolean, required: false })\n+  @ApiQuery({ name: 'is_promotion', type: Boolean, required: false })\n+  @ApiQuery({ name: 'bnpl_active', type: Boolean, required: false })\n+  @ApiQuery({ name: 'seller_id', type: Number, required: false })\n+  @ApiQuery({ name: 'seller_title', type: String, required: false })\n+  @ApiQuery({ name: 'seller_code', type: String, required: false })\n+  @ApiQuery({ name: 'sortColumn', type: String, required: false })\n+  @ApiQuery({ name: 'sortType', type: String, required: false })\n+    @ApiQuery({ name: 'sortColumn', required: false }) \n+  @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-      const { quantity, product_title_fa,sortColumn, sortType } = params;\n+  const { quantity, product_title_fa, product_id, title_fa, title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n     quantity,\n     product_id,\n"
                },
                {
                    "date": 1704714745921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n   const { quantity, product_title_fa, product_id, title_fa, title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n \n+  // Pass the variables to the service method as arguments\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n     quantity,\n     product_id,\n@@ -160,10 +161,13 @@\n     is_promotion,\n     bnpl_active,\n     seller_id,\n     seller_title,\n-    seller_code\n+    seller_code,\n+    sortColumn,\n+    sortType\n   );\n+\n  }\n   // @Get('orderItem')\n   // async get_orderItems(@Query() query): Promise<OrderItem[]> {\n   //   // get the query parameters from the query object\n"
                },
                {
                    "date": 1704714820387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,16 +140,15 @@\n     @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-  const { quantity, product_title_fa, product_id, title_fa, title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+  const { quantity, product_title_fa, product_id, title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n \n   // Pass the variables to the service method as arguments\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n     quantity,\n     product_id,\n-    title_fa,\n     title_en,\n     brand,\n     category,\n     item_category2,\n"
                },
                {
                    "date": 1704714834095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,16 +140,15 @@\n     @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-  const { quantity, product_title_fa, product_id, title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+  const { quantity, product_title_fa, product_id, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n \n   // Pass the variables to the service method as arguments\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n     quantity,\n     product_id,\n-    title_en,\n     brand,\n     category,\n     item_category2,\n     item_category3,\n"
                },
                {
                    "date": 1704714895471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,15 +140,16 @@\n     @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-  const { quantity, product_title_fa, product_id, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+  const { quantity, product_title_fa, product_id,product_title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n \n   // Pass the variables to the service method as arguments\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n     quantity,\n     product_id,\n+    product_title_en,\n     brand,\n     category,\n     item_category2,\n     item_category3,\n"
                },
                {
                    "date": 1704715640066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,48 +121,49 @@\n   @ApiQuery({ name: 'quantity', type: Number, required: false })\n   @ApiQuery({ name: 'product_id', type: Number, required: false })\n   @ApiQuery({ name: 'title_fa', type: String, required: false })\n   @ApiQuery({ name: 'title_en', type: String, required: false })\n-  @ApiQuery({ name: 'brand', type: String, required: false })\n-  @ApiQuery({ name: 'category', type: String, required: false })\n-  @ApiQuery({ name: 'item_category2', type: String, required: false })\n-  @ApiQuery({ name: 'item_category3', type: String, required: false })\n-  @ApiQuery({ name: 'rrp_price', type: Number, required: false })\n-  @ApiQuery({ name: 'selling_price', type: Number, required: false })\n-  @ApiQuery({ name: 'discount_percent', type: Number, required: false })\n-  @ApiQuery({ name: 'is_incredible', type: Boolean, required: false })\n-  @ApiQuery({ name: 'is_promotion', type: Boolean, required: false })\n-  @ApiQuery({ name: 'bnpl_active', type: Boolean, required: false })\n-  @ApiQuery({ name: 'seller_id', type: Number, required: false })\n-  @ApiQuery({ name: 'seller_title', type: String, required: false })\n-  @ApiQuery({ name: 'seller_code', type: String, required: false })\n-  @ApiQuery({ name: 'sortColumn', type: String, required: false })\n-  @ApiQuery({ name: 'sortType', type: String, required: false })\n+  // @ApiQuery({ name: 'brand', type: String, required: false })\n+  // @ApiQuery({ name: 'category', type: String, required: false })\n+  // @ApiQuery({ name: 'item_category2', type: String, required: false })\n+  // @ApiQuery({ name: 'item_category3', type: String, required: false })\n+  // @ApiQuery({ name: 'rrp_price', type: Number, required: false })\n+  // @ApiQuery({ name: 'selling_price', type: Number, required: false })\n+  // @ApiQuery({ name: 'discount_percent', type: Number, required: false })\n+  // @ApiQuery({ name: 'is_incredible', type: Boolean, required: false })\n+  // @ApiQuery({ name: 'is_promotion', type: Boolean, required: false })\n+  // @ApiQuery({ name: 'bnpl_active', type: Boolean, required: false })\n+  // @ApiQuery({ name: 'seller_id', type: Number, required: false })\n+  // @ApiQuery({ name: 'seller_title', type: String, required: false })\n+  // @ApiQuery({ name: 'seller_code', type: String, required: false })\n+  // @ApiQuery({ name: 'sortColumn', type: String, required: false })\n+  // @ApiQuery({ name: 'sortType', type: String, required: false })\n     @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-  const { quantity, product_title_fa, product_id,product_title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+  //const { quantity, product_title_fa, product_id,product_title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+  const { quantity, product_title_fa, product_id,product_title_en,sortColumn, sortType } = params;\n \n   // Pass the variables to the service method as arguments\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n     quantity,\n     product_id,\n     product_title_en,\n-    brand,\n-    category,\n-    item_category2,\n-    item_category3,\n-    rrp_price,\n-    selling_price,\n-    discount_percent,\n-    is_incredible,\n-    is_promotion,\n-    bnpl_active,\n-    seller_id,\n-    seller_title,\n-    seller_code,\n+    // brand,\n+    // category,\n+    // item_category2,\n+    // item_category3,\n+    // rrp_price,\n+    // selling_price,\n+    // discount_percent,\n+    // is_incredible,\n+    // is_promotion,\n+    // bnpl_active,\n+    // seller_id,\n+    // seller_title,\n+    // seller_code,\n     sortColumn,\n     sortType\n   );\n \n"
                },
                {
                    "date": 1704716161222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n \n   @Get('oi')\n   @ApiQuery({ name: 'quantity', type: Number, required: false })\n   @ApiQuery({ name: 'product_id', type: Number, required: false })\n-  @ApiQuery({ name: 'title_fa', type: String, required: false })\n+  @ApiQuery({ name: 'product_title_fa', type: String, required: false })\n   @ApiQuery({ name: 'title_en', type: String, required: false })\n   // @ApiQuery({ name: 'brand', type: String, required: false })\n   // @ApiQuery({ name: 'category', type: String, required: false })\n   // @ApiQuery({ name: 'item_category2', type: String, required: false })\n"
                },
                {
                    "date": 1704718035871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,21 +149,21 @@\n     product_title_fa,\n     quantity,\n     product_id,\n     product_title_en,\n-    // brand,\n-    // category,\n-    // item_category2,\n-    // item_category3,\n-    // rrp_price,\n-    // selling_price,\n-    // discount_percent,\n-    // is_incredible,\n-    // is_promotion,\n-    // bnpl_active,\n-    // seller_id,\n-    // seller_title,\n-    // seller_code,\n+    brand,\n+    category,\n+    item_category2,\n+    item_category3,\n+    rrp_price,\n+    selling_price,\n+    discount_percent,\n+    is_incredible,\n+    is_promotion,\n+    bnpl_active,\n+    seller_id,\n+    seller_title,\n+    seller_code,\n     sortColumn,\n     sortType\n   );\n \n"
                },
                {
                    "date": 1704718047010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,23 +121,23 @@\n   @ApiQuery({ name: 'quantity', type: Number, required: false })\n   @ApiQuery({ name: 'product_id', type: Number, required: false })\n   @ApiQuery({ name: 'product_title_fa', type: String, required: false })\n   @ApiQuery({ name: 'title_en', type: String, required: false })\n-  // @ApiQuery({ name: 'brand', type: String, required: false })\n-  // @ApiQuery({ name: 'category', type: String, required: false })\n-  // @ApiQuery({ name: 'item_category2', type: String, required: false })\n-  // @ApiQuery({ name: 'item_category3', type: String, required: false })\n-  // @ApiQuery({ name: 'rrp_price', type: Number, required: false })\n-  // @ApiQuery({ name: 'selling_price', type: Number, required: false })\n-  // @ApiQuery({ name: 'discount_percent', type: Number, required: false })\n-  // @ApiQuery({ name: 'is_incredible', type: Boolean, required: false })\n-  // @ApiQuery({ name: 'is_promotion', type: Boolean, required: false })\n-  // @ApiQuery({ name: 'bnpl_active', type: Boolean, required: false })\n-  // @ApiQuery({ name: 'seller_id', type: Number, required: false })\n-  // @ApiQuery({ name: 'seller_title', type: String, required: false })\n-  // @ApiQuery({ name: 'seller_code', type: String, required: false })\n-  // @ApiQuery({ name: 'sortColumn', type: String, required: false })\n-  // @ApiQuery({ name: 'sortType', type: String, required: false })\n+  @ApiQuery({ name: 'brand', type: String, required: false })\n+  @ApiQuery({ name: 'category', type: String, required: false })\n+  @ApiQuery({ name: 'item_category2', type: String, required: false })\n+  @ApiQuery({ name: 'item_category3', type: String, required: false })\n+  @ApiQuery({ name: 'rrp_price', type: Number, required: false })\n+  @ApiQuery({ name: 'selling_price', type: Number, required: false })\n+  @ApiQuery({ name: 'discount_percent', type: Number, required: false })\n+  @ApiQuery({ name: 'is_incredible', type: Boolean, required: false })\n+  @ApiQuery({ name: 'is_promotion', type: Boolean, required: false })\n+  @ApiQuery({ name: 'bnpl_active', type: Boolean, required: false })\n+  @ApiQuery({ name: 'seller_id', type: Number, required: false })\n+  @ApiQuery({ name: 'seller_title', type: String, required: false })\n+  @ApiQuery({ name: 'seller_code', type: String, required: false })\n+  @ApiQuery({ name: 'sortColumn', type: String, required: false })\n+  @ApiQuery({ name: 'sortType', type: String, required: false })\n     @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n"
                },
                {
                    "date": 1704718055405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,10 +140,10 @@\n     @ApiQuery({ name: 'sortColumn', required: false }) \n   @ApiQuery({ name: 'sortType', required: false }) \n  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-  //const { quantity, product_title_fa, product_id,product_title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n-  const { quantity, product_title_fa, product_id,product_title_en,sortColumn, sortType } = params;\n+  const { quantity, product_title_fa, product_id,product_title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n+  //const { quantity, product_title_fa, product_id,product_title_en,sortColumn, sortType } = params;\n \n   // Pass the variables to the service method as arguments\n   return this.orderItemService.get_orderItems(\n     product_title_fa,\n"
                },
                {
                    "date": 1704718085853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,16 +101,16 @@\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n-    // this.logger.log(\n-    //   'orderItem Get params: ' + quantity + sortColumn + sortType,\n-    // );\n+  // this.logger.log(\n+  //   'orderItem Get params: ' + quantity + sortColumn + sortType,\n+  // );\n   // @Get('oi')\n   // @ApiQuery({ name: 'quantity', required: false })\n   // @ApiQuery({ name: 'product_title_fa', required: false })\n-  // @ApiQuery({ name: 'sortColumn', required: false }) \n-  // @ApiQuery({ name: 'sortType', required: false }) \n+  // @ApiQuery({ name: 'sortColumn', required: false })\n+  // @ApiQuery({ name: 'sortType', required: false })\n   // async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n   //   const { quantity, product_title_fa,sortColumn, sortType } = params;\n \n@@ -136,39 +136,57 @@\n   @ApiQuery({ name: 'seller_title', type: String, required: false })\n   @ApiQuery({ name: 'seller_code', type: String, required: false })\n   @ApiQuery({ name: 'sortColumn', type: String, required: false })\n   @ApiQuery({ name: 'sortType', type: String, required: false })\n-    @ApiQuery({ name: 'sortColumn', required: false }) \n-  @ApiQuery({ name: 'sortType', required: false }) \n- async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n+  @ApiQuery({ name: 'sortColumn', required: false })\n+  @ApiQuery({ name: 'sortType', required: false })\n+  async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n+    const {\n+      quantity,\n+      product_title_fa,\n+      product_id,\n+      product_title_en,\n+      brand,\n+      category,\n+      item_category2,\n+      item_category3,\n+      rrp_price,\n+      selling_price,\n+      discount_percent,\n+      is_incredible,\n+      is_promotion,\n+      bnpl_active,\n+      seller_id,\n+      seller_title,\n+      seller_code,\n+      sortColumn,\n+      sortType,\n+    } = params;\n+    //const { quantity, product_title_fa, product_id,product_title_en,sortColumn, sortType } = params;\n \n-  const { quantity, product_title_fa, product_id,product_title_en, brand, category, item_category2, item_category3, rrp_price, selling_price, discount_percent, is_incredible, is_promotion, bnpl_active, seller_id, seller_title, seller_code, sortColumn, sortType } = params;\n-  //const { quantity, product_title_fa, product_id,product_title_en,sortColumn, sortType } = params;\n-\n-  // Pass the variables to the service method as arguments\n-  return this.orderItemService.get_orderItems(\n-    product_title_fa,\n-    quantity,\n-    product_id,\n-    product_title_en,\n-    brand,\n-    category,\n-    item_category2,\n-    item_category3,\n-    rrp_price,\n-    selling_price,\n-    discount_percent,\n-    is_incredible,\n-    is_promotion,\n-    bnpl_active,\n-    seller_id,\n-    seller_title,\n-    seller_code,\n-    sortColumn,\n-    sortType\n-  );\n-\n- }\n+    // Pass the variables to the service method as arguments\n+    return this.orderItemService.get_orderItems(\n+      product_title_fa,\n+      quantity,\n+      product_id,\n+      product_title_en,\n+      brand,\n+      category,\n+      item_category2,\n+      item_category3,\n+      rrp_price,\n+      selling_price,\n+      discount_percent,\n+      is_incredible,\n+      is_promotion,\n+      bnpl_active,\n+      seller_id,\n+      seller_title,\n+      seller_code,\n+      sortColumn,\n+      sortType,\n+    );\n+  }\n   // @Get('orderItem')\n   // async get_orderItems(@Query() query): Promise<OrderItem[]> {\n   //   // get the query parameters from the query object\n   //   const { item_category2, item_category3, product_status, seller_id } = query;\n"
                },
                {
                    "date": 1704726755025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,24 +101,11 @@\n       order_item_grouping: order_orderItems_grouping,\n       orders_grouping: orders_grouping,\n     });\n   }\n-  // this.logger.log(\n-  //   'orderItem Get params: ' + quantity + sortColumn + sortType,\n-  // );\n-  // @Get('oi')\n-  // @ApiQuery({ name: 'quantity', required: false })\n-  // @ApiQuery({ name: 'product_title_fa', required: false })\n-  // @ApiQuery({ name: 'sortColumn', required: false })\n-  // @ApiQuery({ name: 'sortType', required: false })\n-  // async getUsers(@Query(ValidationPipe) params: OrderItemDto) {\n \n-  //   const { quantity, product_title_fa,sortColumn, sortType } = params;\n \n-  //   return this.orderItemService.get_orderItems(,product_title_faquantity, sortColumn, sortType);\n-  // }\n-\n-  @Get('oi')\n+  @Get('orderItem')\n   @ApiQuery({ name: 'quantity', type: Number, required: false })\n   @ApiQuery({ name: 'product_id', type: Number, required: false })\n   @ApiQuery({ name: 'product_title_fa', type: String, required: false })\n   @ApiQuery({ name: 'title_en', type: String, required: false })\n@@ -160,11 +147,9 @@\n       seller_code,\n       sortColumn,\n       sortType,\n     } = params;\n-    //const { quantity, product_title_fa, product_id,product_title_en,sortColumn, sortType } = params;\n \n-    // Pass the variables to the service method as arguments\n     return this.orderItemService.get_orderItems(\n       product_title_fa,\n       quantity,\n       product_id,\n@@ -185,11 +170,6 @@\n       sortColumn,\n       sortType,\n     );\n   }\n-  // @Get('orderItem')\n-  // async get_orderItems(@Query() query): Promise<OrderItem[]> {\n-  //   // get the query parameters from the query object\n-  //   const { item_category2, item_category3, product_status, seller_id } = query;\n-  //   return this.orderItemService.get_orderItems(2, 'quantity', 'DESC');\n-  // }\n+\n }\n"
                },
                {
                    "date": 1704778666411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n   > {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n \n-  orders_grouping = (data) => {\n+  orders_grouping0 = (data) => {\n     const groupedData = R.groupBy(R.prop('item_category2'), data);\n     // Calculate and show corresponding values\n     const result = R.mapObjIndexed((group) => {\n       return {\n@@ -80,8 +80,24 @@\n       };\n     }, groupedData);\n     return result;\n   };\n+  orders_grouping = (data) => {\n+    const groupedData = R.groupBy(R.prop('item_category2'), data);\n+    // Calculate and show corresponding values\n+    const result = R.map((group) => {\n+      return {\n+        category: R.head(group).item_category2,\n+        count: R.sum(R.pluck('count', group)),\n+        max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+        avg_price: R.mean(R.pluck('avg_price', group)),\n+        total_price: R.sum(R.pluck('total_price', group)),\n+        avg_discount: R.mean(R.pluck('avg_discount', group)),\n+      };\n+    }, R.values(groupedData));\n+    return result;\n+  };\n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n"
                },
                {
                    "date": 1704779259795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,22 +66,9 @@\n   > {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n \n-  orders_grouping0 = (data) => {\n-    const groupedData = R.groupBy(R.prop('item_category2'), data);\n-    // Calculate and show corresponding values\n-    const result = R.mapObjIndexed((group) => {\n-      return {\n-        count: R.sum(R.pluck('count', group)),\n-        max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-        avg_price: R.mean(R.pluck('avg_price', group)),\n-        total_price: R.sum(R.pluck('total_price', group)),\n-        avg_discount: R.mean(R.pluck('avg_discount', group)),\n-      };\n-    }, groupedData);\n-    return result;\n-  };\n+ \n   orders_grouping = (data) => {\n     const groupedData = R.groupBy(R.prop('item_category2'), data);\n     // Calculate and show corresponding values\n     const result = R.map((group) => {\n"
                },
                {
                    "date": 1704784258905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,19 +72,22 @@\n     const groupedData = R.groupBy(R.prop('item_category2'), data);\n     // Calculate and show corresponding values\n     const result = R.map((group) => {\n       return {\n-        category: R.head(group).item_category2,\n-        count: R.sum(R.pluck('count', group)),\n-        max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-        avg_price: R.mean(R.pluck('avg_price', group)),\n-        total_price: R.sum(R.pluck('total_price', group)),\n-        avg_discount: R.mean(R.pluck('avg_discount', group)),\n+        item_category2: {\n+          title: R.head(group).item_category2,\n+          count: R.sum(R.pluck('count', group)),\n+          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+          avg_price: R.mean(R.pluck('avg_price', group)),\n+          total_price: R.sum(R.pluck('total_price', group)),\n+          avg_discount: R.mean(R.pluck('avg_discount', group)),\n+        }\n       };\n     }, R.values(groupedData));\n     return result;\n   };\n   \n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n"
                },
                {
                    "date": 1704785637624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,15 +67,16 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n \n  \n-  orders_grouping = (data) => {\n-    const groupedData = R.groupBy(R.prop('item_category2'), data);\n+  orders_grouping_by_categories_2_3 = (data, categoryField) => {\n+    const groupedData = R.groupBy(R.prop(categoryField), data);\n     // Calculate and show corresponding values\n     const result = R.map((group) => {\n+      const categoryTitle = R.head(group)[categoryField];\n       return {\n-        item_category2: {\n-          title: R.head(group).item_category2,\n+        [categoryField]: {\n+          title: categoryTitle,\n           count: R.sum(R.pluck('count', group)),\n           max_price: R.apply(Math.max, R.pluck('max_price', group)),\n           avg_price: R.mean(R.pluck('avg_price', group)),\n           total_price: R.sum(R.pluck('total_price', group)),\n@@ -86,8 +87,9 @@\n     return result;\n   };\n   \n   \n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n@@ -99,9 +101,9 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const orders_grouping = this.orders_grouping(order_orderItems_grouping);\n+    const orders_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\");\n \n     // use the send method to return the response with two parts\n     res.send({\n       order_item_grouping: order_orderItems_grouping,\n"
                },
                {
                    "date": 1704785732735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,14 +96,15 @@\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n     @Res() res: Response, // inject the response object\n   ) {\n-    const order_orderItems_grouping =\n+    const order_orderItems_grouping_ =\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const orders_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\");\n+    const order_orderItems_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n+    const orders_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n \n     // use the send method to return the response with two parts\n     res.send({\n       order_item_grouping: order_orderItems_grouping,\n"
                },
                {
                    "date": 1704785777655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const order_orderItems_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n+    const order_orderItems_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category3\");\n     const orders_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n \n     // use the send method to return the response with two parts\n     res.send({\n"
                },
                {
                    "date": 1704789688792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,15 +101,15 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const order_orderItems_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category3\");\n-    const orders_grouping = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n+    const orderGroupedCategory_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n+    const orderGroupedCategory_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category3\");\n \n     // use the send method to return the response with two parts\n     res.send({\n-      order_item_grouping: order_orderItems_grouping,\n-      orders_grouping: orders_grouping,\n+      orderGroupedCategory_2: orderGroupedCategory_2,\n+      orderGroupedCategory_3: orderGroupedCategory_3,\n     });\n   }\n \n \n"
                },
                {
                    "date": 1704789953639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,26 +70,28 @@\n  \n   orders_grouping_by_categories_2_3 = (data, categoryField) => {\n     const groupedData = R.groupBy(R.prop(categoryField), data);\n     // Calculate and show corresponding values\n-    const result = R.map((group) => {\n-      const categoryTitle = R.head(group)[categoryField];\n-      return {\n-        [categoryField]: {\n-          title: categoryTitle,\n-          count: R.sum(R.pluck('count', group)),\n-          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-          avg_price: R.mean(R.pluck('avg_price', group)),\n-          total_price: R.sum(R.pluck('total_price', group)),\n-          avg_discount: R.mean(R.pluck('avg_discount', group)),\n-        }\n-      };\n+    const result = R.chain((group) => {\n+      return R.map((item) => {\n+        const categoryTitle = item[categoryField];\n+        return {\n+          category: {\n+            name: categoryField,\n+            title: categoryTitle,\n+            count: item.count,\n+            max_price: item.max_price,\n+            avg_price: item.avg_price,\n+            total_price: item.total_price,\n+            avg_discount: item.avg_discount,\n+          }\n+        };\n+      }, group);\n     }, R.values(groupedData));\n     return result;\n   };\n   \n   \n-  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n"
                },
                {
                    "date": 1704791567369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,51 +67,48 @@\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n \n  \n-  orders_grouping_by_categories_2_3 = (data, categoryField) => {\n+  orders_grouping_by_categor = (data, categoryField) => {\n     const groupedData = R.groupBy(R.prop(categoryField), data);\n     // Calculate and show corresponding values\n-    const result = R.chain((group) => {\n-      return R.map((item) => {\n-        const categoryTitle = item[categoryField];\n-        return {\n-          category: {\n-            name: categoryField,\n-            title: categoryTitle,\n-            count: item.count,\n-            max_price: item.max_price,\n-            avg_price: item.avg_price,\n-            total_price: item.total_price,\n-            avg_discount: item.avg_discount,\n-          }\n-        };\n-      }, group);\n+    const result = R.map((group) => {\n+      const categoryTitle = R.head(group)[categoryField];\n+      return {\n+        [categoryField]: {\n+          title: categoryTitle,\n+          count: R.sum(R.pluck('count', group)),\n+          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+          avg_price: R.mean(R.pluck('avg_price', group)),\n+          total_price: R.sum(R.pluck('total_price', group)),\n+          avg_discount: R.mean(R.pluck('avg_discount', group)),\n+        }\n+      };\n     }, R.values(groupedData));\n     return result;\n   };\n   \n   \n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n     @Query('item_category2') item_category2: string,\n     @Query('item_category3') item_category3: string,\n     @Res() res: Response, // inject the response object\n   ) {\n-    const order_orderItems_grouping_ =\n+    const order_orderItems_grouping =\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const orderGroupedCategory_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category2\");\n-    const orderGroupedCategory_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping_,\"item_category3\");\n+    const orders_grouping = this.orders_grouping_by_categor(order_orderItems_grouping,\"item_category2\");\n \n     // use the send method to return the response with two parts\n     res.send({\n-      orderGroupedCategory_2: orderGroupedCategory_2,\n-      orderGroupedCategory_3: orderGroupedCategory_3,\n+      order_item_grouping: order_orderItems_grouping,\n+      orders_grouping: orders_grouping,\n     });\n   }\n \n \n"
                },
                {
                    "date": 1704791639738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,14 +101,15 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const orders_grouping = this.orders_grouping_by_categor(order_orderItems_grouping,\"item_category2\");\n+    const orders_grouping_2 = this.orders_grouping_by_categor(order_orderItems_grouping,\"item_category2\");\n+    const orders_grouping_3 = this.orders_grouping_by_categor(order_orderItems_grouping,\"item_category3\");\n \n     // use the send method to return the response with two parts\n     res.send({\n-      order_item_grouping: order_orderItems_grouping,\n-      orders_grouping: orders_grouping,\n+      order_item_grouping: orders_grouping_2,\n+      orders_grouping: orders_grouping_3,\n     });\n   }\n \n \n"
                },
                {
                    "date": 1704791722799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,10 +86,32 @@\n     }, R.values(groupedData));\n     return result;\n   };\n   \n+  orders_grouping_by_categories_2_3 = (data, categoryField) => {\n+    const groupedData = R.groupBy(R.prop(categoryField), data);\n+    // Calculate and show corresponding values\n+    const result = R.chain((group) => {\n+      return R.map((item) => {\n+        const categoryTitle = item[categoryField];\n+        return {\n+          category: {\n+            name: categoryField,\n+            title: categoryTitle,\n+            count: item.count,\n+            max_price: item.max_price,\n+            avg_price: item.avg_price,\n+            total_price: item.total_price,\n+            avg_discount: item.avg_discount,\n+          }\n+        };\n+      }, group);\n+    }, R.values(groupedData));\n+    return result;\n+  };\n   \n   \n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n@@ -101,10 +123,10 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const orders_grouping_2 = this.orders_grouping_by_categor(order_orderItems_grouping,\"item_category2\");\n-    const orders_grouping_3 = this.orders_grouping_by_categor(order_orderItems_grouping,\"item_category3\");\n+    const orders_grouping_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\");\n+    const orders_grouping_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category3\");\n \n     // use the send method to return the response with two parts\n     res.send({\n       order_item_grouping: orders_grouping_2,\n"
                },
                {
                    "date": 1704791771844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     const groupedData = R.groupBy(R.prop(categoryField), data);\n     // Calculate and show corresponding values\n     const result = R.chain((group) => {\n       return R.map((item) => {\n-        const categoryTitle = item[categoryField];\n+        const categoryTitle = R.head(group)[categoryField];\n         return {\n           category: {\n             name: categoryField,\n             title: categoryTitle,\n"
                },
                {
                    "date": 1704791887668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,23 +89,21 @@\n   \n   orders_grouping_by_categories_2_3 = (data, categoryField) => {\n     const groupedData = R.groupBy(R.prop(categoryField), data);\n     // Calculate and show corresponding values\n-    const result = R.chain((group) => {\n-      return R.map((item) => {\n-        const categoryTitle = R.head(group)[categoryField];\n-        return {\n-          category: {\n-            name: categoryField,\n-            title: categoryTitle,\n-            count: item.count,\n-            max_price: item.max_price,\n-            avg_price: item.avg_price,\n-            total_price: item.total_price,\n-            avg_discount: item.avg_discount,\n-          }\n-        };\n-      }, group);\n+    const result = R.map((group) => {\n+      const categoryTitle = R.head(group)[categoryField];\n+      return {\n+        category: {\n+          name: categoryField,\n+          title: categoryTitle,\n+          count: R.sum(R.pluck('count', group)),\n+          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+          avg_price: R.mean(R.pluck('avg_price', group)),\n+          total_price: R.sum(R.pluck('total_price', group)),\n+          avg_discount: R.mean(R.pluck('avg_discount', group)),\n+        }\n+      };\n     }, R.values(groupedData));\n     return result;\n   };\n   \n"
                },
                {
                    "date": 1704791989865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,27 +66,9 @@\n   > {\n     return this.hamechidunService.get_populate_order_product_price_expensive();\n   }\n \n- \n-  orders_grouping_by_categor = (data, categoryField) => {\n-    const groupedData = R.groupBy(R.prop(categoryField), data);\n-    // Calculate and show corresponding values\n-    const result = R.map((group) => {\n-      const categoryTitle = R.head(group)[categoryField];\n-      return {\n-        [categoryField]: {\n-          title: categoryTitle,\n-          count: R.sum(R.pluck('count', group)),\n-          max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-          avg_price: R.mean(R.pluck('avg_price', group)),\n-          total_price: R.sum(R.pluck('total_price', group)),\n-          avg_discount: R.mean(R.pluck('avg_discount', group)),\n-        }\n-      };\n-    }, R.values(groupedData));\n-    return result;\n-  };\n+\n   \n   orders_grouping_by_categories_2_3 = (data, categoryField) => {\n     const groupedData = R.groupBy(R.prop(categoryField), data);\n     // Calculate and show corresponding values\n@@ -121,19 +103,20 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-    const orders_grouping_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\");\n-    const orders_grouping_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category3\");\n+      const orderGroupedCategory_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\");\n+      const orderGroupedCategory_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category3\");\n+  \n+      // use the send method to return the response with two parts\n+      res.send({\n+        orderGroupedCategory_2: orderGroupedCategory_2,\n+        orderGroupedCategory_3: orderGroupedCategory_3,\n+      });\n+    }\n+  \n \n-    // use the send method to return the response with two parts\n-    res.send({\n-      order_item_grouping: orders_grouping_2,\n-      orders_grouping: orders_grouping_3,\n-    });\n-  }\n \n-\n   @Get('orderItem')\n   @ApiQuery({ name: 'quantity', type: Number, required: false })\n   @ApiQuery({ name: 'product_id', type: Number, required: false })\n   @ApiQuery({ name: 'product_title_fa', type: String, required: false })\n"
                },
                {
                    "date": 1704792378476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,19 +79,20 @@\n           name: categoryField,\n           title: categoryTitle,\n           count: R.sum(R.pluck('count', group)),\n           max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-          avg_price: R.mean(R.pluck('avg_price', group)),\n+          avg_price: R.round(R.mean(R.pluck('avg_price', group)), 2),\n           total_price: R.sum(R.pluck('total_price', group)),\n-          avg_discount: R.mean(R.pluck('avg_discount', group)),\n+          avg_discount: R.round(R.mean(R.pluck('avg_discount', group)), 2),\n         }\n       };\n     }, R.values(groupedData));\n     return result;\n   };\n   \n   \n   \n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n"
                },
                {
                    "date": 1704793036519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,20 +79,19 @@\n           name: categoryField,\n           title: categoryTitle,\n           count: R.sum(R.pluck('count', group)),\n           max_price: R.apply(Math.max, R.pluck('max_price', group)),\n-          avg_price: R.round(R.mean(R.pluck('avg_price', group)), 2),\n+          avg_price: R.mean(R.pluck('avg_price', group)),\n           total_price: R.sum(R.pluck('total_price', group)),\n-          avg_discount: R.round(R.mean(R.pluck('avg_discount', group)), 2),\n+          avg_discount: R.mean(R.pluck('avg_discount', group)),\n         }\n       };\n     }, R.values(groupedData));\n     return result;\n   };\n   \n   \n   \n-  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n"
                },
                {
                    "date": 1704950899809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,16 @@\n   }\n \n \n   \n-  orders_grouping_by_categories_2_3 = (data, categoryField) => {\n-    const groupedData = R.groupBy(R.prop(categoryField), data);\n+  orders_grouping_by_categories_2_3 = (data, categoryField,is_item_category3) => {\n+    //const groupedData = R.groupBy(R.prop(categoryField), data);\n+    let groupedData;\n+    if (is_item_category3) {\n+      groupedData = R.groupBy(R.prop(categoryField), R.filter(R.propEq('item_category2', 'item_category3'), data));\n+    } else {\n+      groupedData = R.groupBy(R.prop(categoryField), data);\n+    }\n     // Calculate and show corresponding values\n     const result = R.map((group) => {\n       const categoryTitle = R.head(group)[categoryField];\n       return {\n@@ -103,10 +109,10 @@\n       await this.hamechidunService.get_populate_orders_products_categories_info(\n         item_category2 ?? null,\n         item_category3 ?? null,\n       );\n-      const orderGroupedCategory_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\");\n-      const orderGroupedCategory_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category3\");\n+      const orderGroupedCategory_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\",false);\n+      const orderGroupedCategory_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category3\",true);\n   \n       // use the send method to return the response with two parts\n       res.send({\n         orderGroupedCategory_2: orderGroupedCategory_2,\n"
                },
                {
                    "date": 1704951633220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,23 +68,39 @@\n   }\n \n \n   \n-  orders_grouping_by_categories_2_3 = (data, categoryField,is_item_category3) => {\n-    //const groupedData = R.groupBy(R.prop(categoryField), data);\n-    let groupedData;\n-    if (is_item_category3) {\n-      groupedData = R.groupBy(R.prop(categoryField), R.filter(R.propEq('item_category2', 'item_category3'), data));\n-    } else {\n-      groupedData = R.groupBy(R.prop(categoryField), data);\n-    }\n-    // Calculate and show corresponding values\n+  // orders_grouping_by_categories_2_3 = (data, categoryField,is_item_category3) => {\n+  //   const groupedData = R.groupBy(R.prop(categoryField), data);\n+\n+  //   const result = R.map((group) => {\n+  //     const categoryTitle = R.head(group)[categoryField];\n+  //     return {\n+  //       category: {\n+  //         name: categoryField,\n+  //         title: categoryTitle,\n+  //         count: R.sum(R.pluck('count', group)),\n+  //         max_price: R.apply(Math.max, R.pluck('max_price', group)),\n+  //         avg_price: R.mean(R.pluck('avg_price', group)),\n+  //         total_price: R.sum(R.pluck('total_price', group)),\n+  //         avg_discount: R.mean(R.pluck('avg_discount', group)),\n+  //       }\n+  //     };\n+  //   }, R.values(groupedData));\n+  //   return result;\n+  // };\n+  \n+   orders_grouping_by_categories_2_3 = (data, categoryField, is_item_category3) => {\n+    const groupedData = R.groupBy(R.prop(categoryField), data);\n+  \n     const result = R.map((group) => {\n       const categoryTitle = R.head(group)[categoryField];\n+      const parentCategory = is_item_category3 ? R.head(group)[\"item_category2\"] : null;\n       return {\n         category: {\n           name: categoryField,\n           title: categoryTitle,\n+          parent_category: parentCategory,\n           count: R.sum(R.pluck('count', group)),\n           max_price: R.apply(Math.max, R.pluck('max_price', group)),\n           avg_price: R.mean(R.pluck('avg_price', group)),\n           total_price: R.sum(R.pluck('total_price', group)),\n"
                },
                {
                    "date": 1704952092168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n       return {\n         category: {\n           name: categoryField,\n           title: categoryTitle,\n-          parent_category: parentCategory,\n+          parent: parentCategory,\n           count: R.sum(R.pluck('count', group)),\n           max_price: R.apply(Math.max, R.pluck('max_price', group)),\n           avg_price: R.mean(R.pluck('avg_price', group)),\n           total_price: R.sum(R.pluck('total_price', group)),\n"
                },
                {
                    "date": 1704952797893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,9 @@\n           max_price: R.apply(Math.max, R.pluck('max_price', group)),\n           avg_price: R.mean(R.pluck('avg_price', group)),\n           total_price: R.sum(R.pluck('total_price', group)),\n           avg_discount: R.mean(R.pluck('avg_discount', group)),\n+          childs: []  \n         }\n       };\n     }, R.values(groupedData));\n     return result;\n"
                },
                {
                    "date": 1704953390647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,10 +111,30 @@\n     }, R.values(groupedData));\n     return result;\n   };\n   \n+   fillChildsArray = (category2, category3) => {\n+    return category2.map((cat2) => {\n+      const parentTitle = cat2.category.title;\n+      const matchingCategory3 = category3.filter((cat3) => cat3.category.parent === parentTitle);\n+      const childs = matchingCategory3.map((match) => {\n+        return {\n+          title: match.category.title,\n+          count: match.category.count\n+        };\n+      });\n+      return {\n+        category: {\n+          ...cat2.category,\n+          childs: childs\n+        }\n+      };\n+    });\n+  };\n   \n+\n   \n+  \n \n   @Get('populate_orders_products_categories_info')\n   @HttpCode(200) // specify the HTTP status code\n   async getData(\n@@ -128,12 +148,14 @@\n         item_category3 ?? null,\n       );\n       const orderGroupedCategory_2 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category2\",false);\n       const orderGroupedCategory_3 = this.orders_grouping_by_categories_2_3(order_orderItems_grouping,\"item_category3\",true);\n+        // Usage\n+  const filledOrderGroupedCategory_2 = this.fillChildsArray(orderGroupedCategory_2, orderGroupedCategory_3);\n   \n       // use the send method to return the response with two parts\n       res.send({\n-        orderGroupedCategory_2: orderGroupedCategory_2,\n+        orderGroupedCategory_2: filledOrderGroupedCategory_2,\n         orderGroupedCategory_3: orderGroupedCategory_3,\n       });\n     }\n   \n"
                },
                {
                    "date": 1704953483234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n       const childs = matchingCategory3.map((match) => {\n         return {\n           title: match.category.title,\n           count: match.category.count\n+          total_price: match.category.total_price\n         };\n       });\n       return {\n         category: {\n"
                },
                {
                    "date": 1704953506133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,10 +117,11 @@\n       const parentTitle = cat2.category.title;\n       const matchingCategory3 = category3.filter((cat3) => cat3.category.parent === parentTitle);\n       const childs = matchingCategory3.map((match) => {\n         return {\n+          name: match.category.name,\n           title: match.category.title,\n-          count: match.category.count\n+          count: match.category.count,\n           total_price: match.category.total_price\n         };\n       });\n       return {\n"
                },
                {
                    "date": 1704953837041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,9 @@\n           name: match.category.name,\n           title: match.category.title,\n           count: match.category.count,\n           total_price: match.category.total_price\n+          parent: match.category.parent\n         };\n       });\n       return {\n         category: {\n"
                }
            ],
            "date": 1704529483035,
            "name": "Commit-0",
            "content": "\nimport { Controller, Get } from '@nestjs/common';\nimport { HamechidunService } from './hamechidun.service';\nimport { TopSellingProduct } from './entity/TopSellingProduct';\nimport { PopulateOrderProductPriceExpensive, PopulateOrdersProductsMost, PopulateOrdersSellersMost, PopulateOrdersSummary } from './entity/entityAll';\n\n@Controller('hamechidun')\nexport class HamechidunController {\n  constructor(private readonly hamechidunService: HamechidunService) {}\n\n  @Get('top-selling')\n  async getTopSellingProducts(): Promise<TopSellingProduct[]> {\n    return this.hamechidunService.get_topSellingProducts();\n  }\n\n   @Get('populate_orders_summary')\n  async get_populate_orders_summery(): Promise<PopulateOrdersSummary> {\n    return this.hamechidunService.get_populate_orders_summery();\n  } \n   @Get('populate_orders_sellers_most')\n  async get_populate_orders_sellers_most(): Promise<PopulateOrdersSellersMost[]> {\n    return this.hamechidunService.get_populate_orders_sellers_most();\n  } \n \n  @Get('populate_orders_products_most')\n  async get_populate_orders_products_most(): Promise<PopulateOrdersProductsMost[]> {\n    return this.hamechidunService.get_populate_orders_products_most();\n  }\n   @Get('populate_order_product_price_expensive')\n  async get_populate_order_product_price_expensive(): Promise<PopulateOrderProductPriceExpensive[]> {\n    return this.hamechidunService.get_populate_order_product_price_expensive();\n  }\n    @Get('populate_orders_products_categories_info')\n  async get_populate_orders_products_categories_info(): Promise<populateOrdersProductsCategoriesInfo[]> {\n    return this.hamechidunService.get_populate_orders_products_categories_info();\n  }\n}\n\n"
        }
    ]
}