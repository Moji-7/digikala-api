{
    "sourceFile": "src/proxy.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1702543783618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1702544585833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,30 @@\n-import { HttpService, Injectable } from '@nestjs/common';\r\n-import { AxiosRequestConfig } from 'axios';\r\n+// import { HttpService, Injectable } from '@nestjs/common';\r\n+// import { AxiosRequestConfig } from 'axios';\r\n \r\n-@Injectable()\r\n-export class ProxyService {\r\n-  constructor(private httpService: HttpService) {}\r\n+// @Injectable()\r\n+// export class ProxyService {\r\n+//   constructor(private httpService: HttpService) {}\r\n \r\n-  async proxyRequest(config: AxiosRequestConfig) {\r\n-    // Rewrite the request path\r\n-    config.url = this.rewritePath(config.url);\r\n+//   async proxyRequest(config: AxiosRequestConfig) {\r\n+//     // Rewrite the request path\r\n+//     config.url = this.rewritePath(config.url);\r\n \r\n-    // Set the target URL as the base URL\r\n-    config.baseURL = 'https://api.digikala.com';\r\n+//     // Set the target URL as the base URL\r\n+//     config.baseURL = 'https://api.digikala.com';\r\n \r\n-    // Make the request using the HttpService\r\n-    try {\r\n-      const response = await this.httpService.request(config).toPromise();\r\n-      return response.data;\r\n-    } catch (error) {\r\n-      // Handle the error\r\n-      throw error;\r\n-    }\r\n-  }\r\n+//     // Make the request using the HttpService\r\n+//     try {\r\n+//       const response = await this.httpService.request(config).toPromise();\r\n+//       return response.data;\r\n+//     } catch (error) {\r\n+//       // Handle the error\r\n+//       throw error;\r\n+//     }\r\n+//   }\r\n \r\n-  rewritePath(path: string) {\r\n-    // Implement your logic to rewrite the path\r\n-    // For example, you can replace some segments or add some prefixes\r\n-    return path;\r\n-  }\r\n-}\r\n+//   rewritePath(path: string) {\r\n+//     // Implement your logic to rewrite the path\r\n+//     // For example, you can replace some segments or add some prefixes\r\n+//     return path;\r\n+//   }\r\n+// }\r\n"
                },
                {
                    "date": 1702546391357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,23 @@\n-// import { HttpService, Injectable } from '@nestjs/common';\r\n-// import { AxiosRequestConfig } from 'axios';\r\n+import { HttpService } from \"@nestjs/axios\";\r\n+import { Inject, Injectable } from \"@nestjs/common\";\r\n+import { HttpModuleOptions } from '@nestjs/axios';\r\n \r\n-// @Injectable()\r\n-// export class ProxyService {\r\n-//   constructor(private httpService: HttpService) {}\r\n \r\n-//   async proxyRequest(config: AxiosRequestConfig) {\r\n-//     // Rewrite the request path\r\n-//     config.url = this.rewritePath(config.url);\r\n+@Injectable()\r\n+export class ProxyService {\r\n+  constructor(@Inject(HttpService) private httpService: HttpService) {}\r\n \r\n-//     // Set the target URL as the base URL\r\n-//     config.baseURL = 'https://api.digikala.com';\r\n-\r\n-//     // Make the request using the HttpService\r\n-//     try {\r\n-//       const response = await this.httpService.request(config).toPromise();\r\n-//       return response.data;\r\n-//     } catch (error) {\r\n-//       // Handle the error\r\n-//       throw error;\r\n-//     }\r\n-//   }\r\n-\r\n-//   rewritePath(path: string) {\r\n-//     // Implement your logic to rewrite the path\r\n-//     // For example, you can replace some segments or add some prefixes\r\n-//     return path;\r\n-//   }\r\n-// }\r\n+  // Use the HttpService methods to make HTTP requests\r\n+  async getProducts() {\r\n+    try {\r\n+      // Make a GET request to the /products endpoint\r\n+      const response = await this.httpService\r\n+        .get('/products')\r\n+        .toPromise();\r\n+      return response.data;\r\n+    } catch (error) {\r\n+      // Handle the error\r\n+      throw error;\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1702543783618,
            "name": "Commit-0",
            "content": "import { HttpService, Injectable } from '@nestjs/common';\r\nimport { AxiosRequestConfig } from 'axios';\r\n\r\n@Injectable()\r\nexport class ProxyService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  async proxyRequest(config: AxiosRequestConfig) {\r\n    // Rewrite the request path\r\n    config.url = this.rewritePath(config.url);\r\n\r\n    // Set the target URL as the base URL\r\n    config.baseURL = 'https://api.digikala.com';\r\n\r\n    // Make the request using the HttpService\r\n    try {\r\n      const response = await this.httpService.request(config).toPromise();\r\n      return response.data;\r\n    } catch (error) {\r\n      // Handle the error\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  rewritePath(path: string) {\r\n    // Implement your logic to rewrite the path\r\n    // For example, you can replace some segments or add some prefixes\r\n    return path;\r\n  }\r\n}\r\n"
        }
    ]
}